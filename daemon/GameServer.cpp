#include "GameServer.h"
#include <WinSock2.h>
#include "MemStream.h"
#include "PacketUtils.h"
#include <assert.h>
#include "Character.h"
#include "PathUtils.h"
#include "StdStreamUtils.h"

static const uint8 g_client0_answer1[0x2A] =
{
	0x01, 0x01, 0x00, 0x00, 0x2A, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x78, 0x9C, 0x93, 0x60, 0x60, 0x67, 0x80, 0x81, 0x88, 0x3B, 0x61, 0x6A, 0xAB, 0xC5, 0x17, 0x3C,			//Contains a 0x18 bytes sub packet (with 8 random bytes)
	0x37, 0x7D, 0xF1, 0x20, 0x00, 0x00, 0x29, 0x10, 0x06, 0x66
};

static const uint8 g_client0_answer2[0x43] =
{
	0x00, 0x01, 0x00, 0x00, 0x43, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x78, 0x9C, 0xB3, 0x60, 0x60, 0x62, 0x80, 0x81, 0x00, 0xED, 0x78, 0x35, 0x47, 0xCD, 0xD9, 0x4C,			//Contains a 0x38 bytes sub packet (seems encrypted)
	0x27, 0xAE, 0xAD, 0xD7, 0xB6, 0x00, 0xB2, 0x77, 0xF4, 0x7E, 0xD0, 0x3E, 0xF1, 0xB7, 0xF5, 0xDF,
	0x8A, 0x9A, 0x68, 0x4E, 0x10, 0x1F, 0x24, 0x0E, 0x12, 0xEB, 0x58, 0x1F, 0xA7, 0x06, 0x00, 0xB4, 
	0xF0, 0x14, 0x4D
};

static const uint8 g_client0_answer3[0x3A] =
{
	0x01, 0x01, 0x00, 0x00, 0x3A, 0x00, 0x01, 0x00, 0x8F, 0x14, 0x8B, 0xEE, 0x3B, 0x01, 0x00, 0x00,			//Contains a 0x30 bytes sub packet (including a time stamp?)
	0x78, 0x9C, 0x33, 0x60, 0x60, 0x66, 0x70, 0xD4, 0x9C, 0xCD, 0x04, 0xC2, 0x0C, 0x0F, 0x2E, 0xFD, 
	0x13, 0x61, 0x60, 0x65, 0x00, 0x01, 0xB3, 0x17, 0x0F, 0x02, 0x40, 0xF4, 0x45, 0x20, 0xFE, 0x02,
	0xC4, 0x1A, 0x0C, 0x10, 0x00, 0x00, 0x09, 0x1B, 0x09, 0x46
};

static const uint8 g_client0_answer4[0x35] =
{
	0x01, 0x01, 0x00, 0x00, 0x35, 0x00, 0x01, 0x00, 0x6A, 0x17, 0x8B, 0xEE, 0x3B, 0x01, 0x00, 0x00,			//Contains a 0x30 bytes sub packet (similar to previous one)
	0x78, 0x9C, 0x33, 0x60, 0x60, 0x66, 0x70, 0xD4, 0x9C, 0xCD, 0x04, 0xC2, 0x0C, 0x0F, 0x2E, 0xFD,
	0x13, 0x61, 0x60, 0x62, 0x00, 0x01, 0xF3, 0x17, 0x0F, 0x02, 0x18, 0x90, 0x00, 0x58, 0x1E, 0x08,
	0x00, 0xF5, 0xDD, 0x08, 0x5E
};

static const uint8 g_client0_answer7[] = 
{
	0x01, 0x01, 0x00, 0x00, 0x90, 0x00, 0x05, 0x00, 0x43, 0x1A, 0x8B, 0xEE, 0x3B, 0x01, 0x00, 0x00,			//Contains two packets, first one includes the character name
	0x78, 0x9C, 0x9B, 0xC1, 0xC0, 0xCC, 0xE0, 0xA8, 0x39, 0x9B, 0x09, 0x84, 0x19, 0x1E, 0x5C, 0xFA,
	0x27, 0xC2, 0x50, 0xC3, 0xC8, 0x00, 0x04, 0xE6, 0x2F, 0x1E, 0x04, 0x80, 0xE8, 0x2F, 0x0C, 0x10,
	0x20, 0xB9, 0xC9, 0x6D, 0x81, 0x89, 0x28, 0x03, 0x4E, 0xC0, 0x1B, 0x90, 0x02, 0xA2, 0x1A, 0x1A,
	0x2D, 0x18, 0x51, 0xC4, 0xFF, 0x03, 0x01, 0x6E, 0x5D, 0xD8, 0x01, 0xC8, 0x04, 0x07, 0x0C, 0x77,
	0xD5, 0xE2, 0x75, 0x17, 0xCC, 0x7E, 0x98, 0xED, 0x3B, 0x18, 0xD1, 0xF5, 0xD7, 0xE3, 0xD5, 0x0F,
	0x52, 0xF7, 0x1F, 0x0A, 0x18, 0x18, 0xC3, 0x8B, 0x52, 0xF3, 0x32, 0x2B, 0x14, 0xC2, 0x8B, 0xF2,
	0xF3, 0xD2, 0x49, 0x75, 0xFD, 0x28, 0x20, 0x07, 0xC0, 0xE2, 0xCD, 0x02, 0x23, 0xDE, 0xEB, 0x88,
	0x8A, 0xF7, 0x04, 0x0C, 0x7D, 0xED, 0x28, 0xFA, 0x28, 0x4D, 0x9F, 0x00, 0xFF, 0xF0, 0x50, 0x35,

	0x01, 0x01, 0x00, 0x00, 0x8E, 0x00, 0x04, 0x00, 0x16, 0x1B, 0x8B, 0xEE, 0x3B, 0x01, 0x00, 0x00,			//Contains two packets, first one includes the character name
	0x78, 0x9C, 0x9B, 0xC1, 0xC0, 0xCC, 0xE0, 0xA8, 0x39, 0x9B, 0x09, 0x84, 0x19, 0x1E, 0x5C, 0xFA,
	0x27, 0xC2, 0x50, 0xC3, 0xC8, 0x00, 0x04, 0x16, 0x2F, 0x1E, 0x04, 0x80, 0xE8, 0x2F, 0x0C, 0x10,
	0xB0, 0xE8, 0xA5, 0xE7, 0x02, 0x13, 0x51, 0x06, 0xA0, 0x6A, 0x08, 0x58, 0xF3, 0xB2, 0x1C, 0x44,
	0x35, 0x30, 0xA0, 0xF1, 0x05, 0xD5, 0x19, 0x50, 0xC0, 0x7F, 0x20, 0x60, 0x20, 0x11, 0x80, 0x1C,
	0xE0, 0x80, 0xE1, 0xAE, 0x5A, 0xBC, 0xEE, 0x82, 0xD9, 0xCF, 0x08, 0x15, 0xDF, 0xC1, 0x88, 0xAE,
	0xBF, 0x1E, 0xAF, 0x7E, 0x90, 0x3A, 0x90, 0x5B, 0xE7, 0x09, 0x83, 0x1C, 0x10, 0x5E, 0x94, 0x9A,
	0x97, 0x59, 0xA1, 0x10, 0x5E, 0x94, 0x9F, 0x97, 0x4E, 0xAA, 0xEB, 0x47, 0x01, 0x39, 0x00, 0x16,
	0x6F, 0x16, 0x18, 0xF1, 0x5E, 0x47, 0x54, 0xBC, 0x03, 0x00, 0x0D, 0x1A, 0x47, 0xE5,

	0x01, 0x01, 0x00, 0x00, 0x3D, 0x00, 0x02, 0x00, 0xAF, 0x1B, 0x8B, 0xEE, 0x3B, 0x01, 0x00, 0x00,			//Contains a 0x28 bytes sub packet (some numbers)
	0x78, 0x9C, 0xD3, 0x60, 0x60, 0x66, 0x70, 0xD4, 0x9C, 0xCD, 0x04, 0xC2, 0x0C, 0x0F, 0x2E, 0xFD,
	0x13, 0x61, 0x10, 0x60, 0x00, 0x01, 0x8B, 0x17, 0x0F, 0x02, 0x18, 0x90, 0x80, 0x06, 0x86, 0x3A,
	0x1E, 0x14, 0x75, 0xB6, 0x0C, 0x8C, 0x60, 0x3E, 0x00, 0x90, 0xE8, 0x0E, 0xF5
};

static const uint8 g_client0_answer8[] = 
{
	0x01, 0x00, 0x00, 0x00, 0xD8, 0x0B, 0x1D, 0x00, 0x75, 0x1C, 0x8B, 0xEE, 0x3B, 0x01, 0x00, 0x00,			//Few sub packets containing commands (commandForced, commandDefault?), character name and retainer name

	0x28, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0xCA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
	0x48, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0x0B, 0x00, 0x63, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 0x46, 0x6F, 0x72, 0x63, 0x65, 0x64, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

	0x48, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0x0A, 0x00, 0x63, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6C, 0x74, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
	0x48, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0x06, 0x00, 0x63, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 0x57, 0x65, 0x61, 0x6B, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
	0x48, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0x00, 0x63, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	
	0x48, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0x06, 0x00, 0x63, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 0x4A, 0x75, 0x64, 0x67, 0x65, 0x4D, 0x6F, 
	0x64, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
	0x48, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x63, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
	0x48, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
	0x48, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x6D, 0x61, 0x63, 0x72, 0x6F, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
	0xA8, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xA0, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x40, 0x03, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
	0x48, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0xCE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCD, 0x8C, 0x1D, 0x43, 0x00, 0x00, 0x00, 0x00, 
	0xCD, 0x0C, 0x25, 0x43, 0x0A, 0xD7, 0xC3, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
	
	0x28, 0x01, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE,			//Character data here
	0x14, 0x00, 0xD6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
	0x3F, 0xF0, 0xE0, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0xD0, 0x14, 0x03, 0x00, 0x00, 0x00, 
	0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 
	0x00, 0x14, 0xD0, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 
	0x00, 0x04, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x40, 0x24, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 
	0xC0, 0x2C, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x8A, 0x54, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 
	0x00, 0xF8, 0x02, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 
	0x00, 0x24, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x24, 0x03, 0x00, 0x19, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
	0x48, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x3D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0xFF, 0xFF, 0xFF, 0xFF, 0x4D, 0x69, 0x6E, 0x69, 0x20, 0x57, 0x72, 0x65, 0x6E, 0x69, 0x78, 0x20, 
	0x57, 0x72, 0x6F, 0x6E, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
	0x38, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
	0x98, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x7C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x41, 0x4F, 0xA0, 0x34, 0x15, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x50, 0x64, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x81, 0x38, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
	
	0x40, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x7D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x41, 0x4F, 0xA0, 0x34, 0x15, 0x00, 0x00, 
	0x0D, 0x50, 0x64, 0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
	0xB8, 0x01, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x7F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x41, 0x4F, 0xA0, 0x34, 0x15, 0x00, 0x00, 
	0x41, 0x29, 0x9B, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0x9E, 0x13, 0x00, 0x00, 0x00, 0x01, 0x57, 0x72, 
	0x65, 0x6E, 0x69, 0x78, 0x20, 0x57, 0x72, 0x6F, 0x6E, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x3A, 0xF5, 0xA5, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x43, 0x6F, 
	0x72, 0x6E, 0x65, 0x6C, 0x69, 0x75, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

	0x38, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x7E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x41, 0x4F, 0xA0, 0x34, 0x15, 0x00, 0x00, 
	0x0D, 0x50, 0x64, 0x00, 0x00, 0x00, 0x00, 0x80, 
	
	0x98, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x7C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x41, 0x4F, 0xA0, 0x34, 0x15, 0x00, 0x00, 
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAC, 0xE9, 0x77, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAC, 0xE9, 0x77, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x11, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3E, 0x3F, 0x00, 0x00, 0x3E, 0x3F, 0x00, 0x00, 0x3E, 0x3F, 0x00, 0x00, 
	0x3E, 0x3F, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
	
	0x40, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x7D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x41, 0x4F, 0xA0, 0x34, 0x15, 0x00, 0x00, 
	0xAC, 0xE9, 0x77, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

	0xB8, 0x01, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x7F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x41, 0x4F, 0xA0, 0x34, 0x15, 0x00, 0x00, 
	0x41, 0x29, 0x9B, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0x9E, 0x13, 0x00, 0x00, 0x00, 0x01, 0x57, 0x72, 
	0x65, 0x6E, 0x69, 0x78, 0x20, 0x57, 0x72, 0x6F, 0x6E, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
	0x38, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE,
	0x14, 0x00, 0x7E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00,
	0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x41, 0x4F, 0xA0, 0x34, 0x15, 0x00, 0x00,
	0xAC, 0xE9, 0x77, 0x00, 0x00, 0x00, 0x00, 0x80, 
	
	0x28, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x34, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
	0x28, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x44, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 
	
	0x48, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x79, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0xDF, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
	0x28, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x45, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
	0x28, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x7B, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
	0x28, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x6D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

	0x28, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
	0x14, 0x00, 0x46, 0x01, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
	0x41, 0x29, 0x9B, 0x02, 0xC8, 0x00, 0x00, 0x00,
};

/*
static const uint8 g_client0_answer8[] = 
{
	0x01, 0x01, 0x00, 0x00, 0x44, 0x02, 0x1D, 0x00, 0x75, 0x1C, 0x8B, 0xEE, 0x3B, 0x01, 0x00, 0x00,			//Few sub packets containing commands (commandForced, commandDefault?), character name and retainer name
	0x78, 0x9C, 0xD3, 0x60, 0x60, 0x66, 0x70, 0xD4, 0x9C, 0xCD, 0x04, 0xC2, 0x0C, 0x0F, 0x2E, 0xFD,			//Also contains character appearance data
	0x13, 0x61, 0x38, 0xC5, 0x00, 0x02, 0x16, 0x2F, 0x1E, 0x04, 0x80, 0x68, 0x0E, 0x06, 0x08, 0xF0,
	0xC0, 0x50, 0x67, 0xC4, 0x88, 0xAC, 0x8E, 0x9B, 0x21, 0x39, 0x3F, 0x37, 0x37, 0x31, 0x2F, 0xC5,
	0x2D, 0xBF, 0x28, 0x39, 0x35, 0x85, 0x01, 0x17, 0x20, 0x64, 0x0E, 0x17, 0xCC, 0x1C, 0x97, 0xD4,
	0xB4, 0xC4, 0xD2, 0x9C, 0x12, 0x72, 0xCD, 0x61, 0x83, 0x99, 0x13, 0x9E, 0x9A, 0x98, 0x8D, 0xD3,
	0x35, 0x84, 0xCD, 0x61, 0x81, 0x99, 0xE3, 0x9C, 0x9F, 0x57, 0x92, 0x9A, 0x47, 0xB9, 0x7B, 0xBC,
	0x4A, 0x53, 0xD2, 0x53, 0x7D, 0xF3, 0x53, 0x52, 0xC9, 0x33, 0x87, 0x81, 0x11, 0x6A, 0x4E, 0x50,
	0x6A, 0x61, 0x69, 0x6A, 0x31, 0xD9, 0xEE, 0x61, 0x60, 0x2C, 0xCF, 0x04, 0x3A, 0xA4, 0xC4, 0xB9,
	0x28, 0x35, 0xB1, 0x04, 0x87, 0x5B, 0x88, 0x33, 0x27, 0x37, 0x31, 0xB9, 0x28, 0x9F, 0x80, 0x6B,
	0x18, 0x18, 0x56, 0x60, 0x98, 0x73, 0x81, 0x01, 0xC5, 0x1C, 0x04, 0x70, 0x00, 0x5B, 0xC0, 0xB0,
	0xC0, 0x81, 0x09, 0x4A, 0x33, 0xE3, 0x36, 0x96, 0x6A, 0x80, 0x05, 0x4A, 0x63, 0xFA, 0xF7, 0x1C,
	0x56, 0x77, 0x9E, 0xED, 0x91, 0x75, 0x06, 0xD3, 0x3C, 0xAA, 0xCE, 0x5C, 0xD7, 0x0F, 0xEF, 0x47,
	0x96, 0x03, 0xB9, 0x5F, 0x83, 0x11, 0xDD, 0x9C, 0x6B, 0x28, 0xE6, 0xC0, 0xFC, 0xC4, 0x0C, 0x55,
	0x6F, 0xFF, 0xE1, 0x01, 0x33, 0xD8, 0xBF, 0x8C, 0x17, 0x44, 0x98, 0xA1, 0x0E, 0x62, 0x81, 0xCA,
	0xB1, 0x82, 0xF8, 0x22, 0x17, 0x38, 0xD8, 0xA0, 0x7A, 0xD8, 0xA1, 0x34, 0x2C, 0x6F, 0x72, 0x42,
	0x69, 0x2E, 0x28, 0xCD, 0x0D, 0xA5, 0x79, 0x80, 0x38, 0x51, 0x81, 0x81, 0x81, 0x17, 0xC4, 0x31,
	0x64, 0x60, 0xE0, 0x03, 0x52, 0x0E, 0x2A, 0x0C, 0x0C, 0xFC, 0x40, 0xFA, 0x80, 0x0E, 0x03, 0x83,
	0x00, 0x90, 0xEE, 0x0A, 0x61, 0x60, 0x10, 0x04, 0xC9, 0xFF, 0x60, 0x62, 0x10, 0x82, 0xEA, 0x13,
	0x86, 0xD2, 0x22, 0x50, 0x5A, 0x14, 0x4A, 0x8B, 0x41, 0x69, 0x71, 0x10, 0x01, 0x34, 0x47, 0x02,
	0x4C, 0x33, 0x33, 0x48, 0x42, 0xC5, 0xA5, 0xA0, 0xB4, 0x34, 0x03, 0x61, 0x20, 0x03, 0xA5, 0x31,
	0xC3, 0xDB, 0x16, 0x25, 0x7D, 0xFD, 0x07, 0x82, 0xF0, 0xA2, 0xD4, 0xBC, 0xCC, 0x0A, 0x85, 0xF0,
	0xA2, 0xFC, 0xBC, 0x74, 0x5C, 0xE6, 0x59, 0x60, 0x98, 0xC3, 0xCF, 0x80, 0x6C, 0x0E, 0x2E, 0x30,
	0x03, 0x43, 0x5F, 0x0D, 0x8A, 0xFD, 0x5F, 0xA0, 0xEA, 0x3A, 0x1D, 0xFD, 0x17, 0x98, 0x88, 0xE2,
	0x34, 0x86, 0x81, 0x37, 0x00, 0x5C, 0xE6, 0x35, 0x34, 0x5A, 0x30, 0xA2, 0x88, 0x83, 0xDC, 0x8F,
	0xCF, 0x7E, 0x6C, 0x00, 0x94, 0x0E, 0x1C, 0x30, 0xDC, 0x55, 0x8B, 0xD7, 0x5D, 0x30, 0xFB, 0x99,
	0xA0, 0xE2, 0x3B, 0x30, 0xD2, 0x5F, 0x3D, 0x5E, 0xFD, 0x20, 0x75, 0x20, 0xB7, 0xCE, 0x03, 0x45,
	0x3E, 0x23, 0xE1, 0x10, 0xB7, 0xFA, 0xBA, 0xF4, 0x01, 0xC2, 0x7F, 0xCE, 0xF9, 0x45, 0x79, 0xA9,
	0x39, 0x99, 0xA5, 0xC5, 0xA4, 0x7A, 0x75, 0x14, 0x40, 0x01, 0x2C, 0xDE, 0x30, 0xD3, 0x71, 0x1D,
	0x51, 0xF1, 0x4E, 0x6C, 0x3A, 0x9E, 0x01, 0xD5, 0x07, 0x2B, 0x7F, 0xD6, 0xBC, 0x2C, 0x07, 0xEB,
	0x67, 0x40, 0xE3, 0x0B, 0xAA, 0xA3, 0xBA, 0x8F, 0x98, 0x74, 0x6C, 0x67, 0x8F, 0x8A, 0x41, 0x0E,
	0x20, 0x36, 0x1D, 0xC3, 0xDC, 0x05, 0xB3, 0x1F, 0x96, 0x8B, 0x88, 0x4D, 0xC7, 0x33, 0xC8, 0x4C,
	0xC7, 0xA3, 0x80, 0xBA, 0x00, 0x16, 0x6F, 0xC4, 0xA6, 0x63, 0xF4, 0x78, 0xD7, 0xC0, 0xD0, 0x67,
	0x82, 0xDA, 0xDE, 0x80, 0xD6, 0xB4, 0x98, 0xEA, 0x5C, 0x50, 0xD5, 0x41, 0xAA, 0x3F, 0x2C, 0xF5,
	0x4B, 0x25, 0x8A, 0xBA, 0xFB, 0x51, 0xC4, 0xF9, 0x0B, 0xD3, 0x3E, 0x57, 0x74, 0xFB, 0x70, 0xA8,
	0xAB, 0x26, 0x52, 0x5D, 0x2E, 0x91, 0xEA, 0xDC, 0x50, 0xD4, 0x81, 0xC4, 0x4F, 0x00, 0x69, 0x00,
	0x91, 0x85, 0x7C, 0x18, 
};
*/

static const uint8 g_client0_answer9[] = 
{
	0x01, 0x01, 0x00, 0x00, 0x0D, 0x02, 0x01, 0x00, 0x92, 0x1C, 0x8B, 0xEE, 0x3B, 0x01, 0x00, 0x00,
	0x78, 0x9C, 0xB5, 0xD6, 0x4D, 0x28, 0x44, 0x51, 0x14, 0x07, 0xF0, 0xFB, 0xDE, 0x3C, 0x66, 0x26,			//One big subpacket with sparse numbers (maybe character status?)
	0x1A, 0x0B, 0xA2, 0x2C, 0x64, 0x8C, 0xE4, 0xA3, 0x87, 0x2C, 0x98, 0x34, 0xCA, 0x6C, 0x58, 0xF8,
	0x08, 0x2B, 0x16, 0x4A, 0x59, 0x92, 0xC5, 0x94, 0x7C, 0x6E, 0x94, 0xAD, 0x52, 0x84, 0x62, 0x37,
	0x1B, 0x25, 0x59, 0x58, 0x4E, 0x52, 0xF2, 0x11, 0x86, 0x98, 0x66, 0x63, 0x37, 0x4B, 0x6A, 0x30,
	0x33, 0x6C, 0x47, 0xCE, 0xB9, 0xEE, 0xBC, 0xD1, 0xE4, 0x5A, 0x4C, 0xF7, 0xDC, 0x3A, 0xF3, 0x9A,
	0x3A, 0xF3, 0x7E, 0xFD, 0xEF, 0x7D, 0xF7, 0xBE, 0xA9, 0x76, 0xD9, 0x98, 0xBF, 0x61, 0x57, 0xC7,
	0x62, 0xB1, 0xC8, 0x57, 0x19, 0xEB, 0xD3, 0x18, 0x0C, 0xEF, 0x73, 0x6C, 0x08, 0xAF, 0x63, 0xAC,
	0xC7, 0x8E, 0xD7, 0x02, 0xA8, 0xA7, 0x57, 0x93, 0xF9, 0xD8, 0xDF, 0x43, 0xE3, 0xBF, 0xD2, 0x7E,
	0x7D, 0xD7, 0x34, 0x49, 0xEB, 0xBF, 0xE3, 0xDC, 0xE8, 0x74, 0xE0, 0x15, 0x3F, 0xFC, 0x6F, 0x26,
	0x5B, 0x24, 0xF6, 0x22, 0xB1, 0x56, 0xEE, 0x15, 0x43, 0xA5, 0xC1, 0x9B, 0x26, 0xF6, 0x12, 0xF6,
	0x9F, 0x7C, 0xF8, 0xE3, 0xC9, 0x77, 0x93, 0x6D, 0x12, 0x7B, 0x21, 0x31, 0x9F, 0x3A, 0xD4, 0x05,
	0x78, 0xF3, 0xC4, 0x5E, 0x34, 0x58, 0xC2, 0x9F, 0x17, 0x1B, 0x54, 0x53, 0xC2, 0x64, 0x95, 0xC4,
	0xDE, 0x96, 0x23, 0xFB, 0xBC, 0xB4, 0x81, 0xB7, 0x43, 0xEC, 0x85, 0xDB, 0xC6, 0xEC, 0x19, 0x2F,
	0x94, 0x34, 0x59, 0x33, 0xB1, 0xB7, 0x91, 0x4C, 0x17, 0x66, 0xEE, 0x74, 0x02, 0x5E, 0x05, 0xB1,
	0xD7, 0xE2, 0xB9, 0xE1, 0xF9, 0x8A, 0xA0, 0x4E, 0xC1, 0x9B, 0x20, 0xF6, 0xF6, 0xFA, 0x1B, 0xB9,
	0x87, 0x21, 0xCF, 0xC0, 0xAB, 0x21, 0xF6, 0x56, 0xDC, 0x41, 0xEE, 0x95, 0x42, 0x5D, 0x82, 0xD7,
	0x4B, 0xEC, 0x45, 0x0F, 0xDA, 0xF9, 0xF3, 0x89, 0xE7, 0xE7, 0x15, 0x78, 0x41, 0x62, 0xEF, 0x5E,
	0x9C, 0x67, 0x38, 0x9F, 0xD7, 0xE0, 0x4D, 0x11, 0x7B, 0xDB, 0x3D, 0xDD, 0xD6, 0x79, 0x86, 0xDE,
	0xAC, 0xA4, 0x4F, 0xCF, 0xF1, 0x74, 0x18, 0xF9, 0x78, 0xA3, 0xFE, 0x2A, 0xBE, 0x7E, 0x2E, 0xA8,
	0x5B, 0xF0, 0xEA, 0x24, 0x7D, 0xAA, 0xF2, 0x95, 0xDF, 0xC4, 0xF9, 0xFE, 0x73, 0x42, 0x85, 0xC1,
	0x73, 0x49, 0xFA, 0x54, 0xE5, 0xF3, 0x88, 0x7C, 0xED, 0xC2, 0xAB, 0x95, 0xF4, 0xA9, 0xCA, 0xD7,
	0xE5, 0xF4, 0x5A, 0xEB, 0xB7, 0x96, 0x32, 0xD9, 0x2A, 0xB1, 0x17, 0x38, 0xBB, 0xE3, 0xF9, 0x0C,
	0xA8, 0x75, 0xF0, 0xC6, 0x89, 0x3D, 0x73, 0xA6, 0xC3, 0xCA, 0x87, 0xDE, 0x9E, 0xA4, 0x4F, 0xD5,
	0xFA, 0x7D, 0x3C, 0xBA, 0xAD, 0xF7, 0xDF, 0x0B, 0x78, 0x6E, 0x49, 0x9F, 0xAA, 0x7C, 0xC3, 0x62,
	0xFF, 0xE1, 0x7C, 0xC6, 0xC1, 0x0B, 0x10, 0x7B, 0x81, 0x39, 0x9F, 0x35, 0x9F, 0xAF, 0xE0, 0xED,
	0x4A, 0xFA, 0x54, 0xCD, 0x67, 0xFD, 0xB2, 0xCF, 0x7A, 0xBF, 0xA3, 0x77, 0x28, 0xE9, 0x53, 0x95,
	0xAF, 0xE8, 0x61, 0x9F, 0xAF, 0x1F, 0xEE, 0xF7, 0x37, 0xF0, 0x06, 0x89, 0xBD, 0xB8, 0x91, 0xFD,
	0x3F, 0x88, 0xDE, 0x92, 0xA4, 0x4F, 0xD5, 0x7C, 0x6A, 0x22, 0x1F, 0x1E, 0x6A, 0x49, 0xF0, 0x06,
	0x64, 0x7D, 0x8A, 0xF2, 0x95, 0x2E, 0x1C, 0x71, 0x4F, 0x17, 0xDE, 0x88, 0xA4, 0x4F, 0x55, 0xBE,
	0x63, 0x31, 0x9F, 0xB8, 0xFF, 0x52, 0xE0, 0xCD, 0x49, 0xFA, 0x72, 0xD3, 0xE4, 0x9B, 0xCF, 0x28,
	0xC8, 0xAE, 0x1F, 0x7A, 0xCB, 0x92, 0x3E, 0x3D, 0xE7, 0xEE, 0x79, 0xBF, 0x1F, 0x1C, 0x59, 0xEF,
	0x13, 0xBC, 0x2D, 0x49, 0x9F, 0xAA, 0xF5, 0xFB, 0x06, 0x61, 0x79, 0x78, 0x5A,

	0x01, 0x01, 0x00, 0x00, 0x03, 0x02, 0x01, 0x00, 0x9F, 0x1C, 0x8B, 0xEE, 0x3B, 0x01, 0x00, 0x00, 
	0x78, 0x9C, 0xB5, 0xD5, 0xC9, 0x4B, 0x42, 0x41, 0x1C, 0x07, 0xF0, 0xF7, 0x5E, 0xE4, 0x96, 0xD8,			//One big subpacket with sparse numbers (maybe character status?)
	0x42, 0x10, 0x45, 0x41, 0xD0, 0x25, 0x09, 0x09, 0x5A, 0xA4, 0x05, 0xA2, 0x85, 0x4A, 0x52, 0xCA,
	0x54, 0xDA, 0x20, 0xA2, 0xEC, 0x5F, 0x10, 0x3A, 0x44, 0x54, 0xF7, 0xA0, 0x5B, 0x87, 0x82, 0xA8,
	0x3C, 0xB4, 0x40, 0x1D, 0x04, 0x2B, 0x4B, 0xE9, 0x16, 0x74, 0x28, 0xE8, 0x18, 0x84, 0x2D, 0x04,
	0x1E, 0x3C, 0x65, 0xD4, 0xA9, 0xE5, 0x37, 0xE3, 0xF8, 0x14, 0x69, 0x3C, 0xC8, 0xFC, 0x06, 0x7E,
	0x8C, 0x4F, 0x7E, 0xBC, 0x0F, 0xDF, 0x79, 0xF3, 0xE6, 0xD5, 0x9A, 0x0A, 0xA4, 0x1E, 0xF3, 0xA6,
	0x42, 0x4A, 0x7A, 0xBA, 0xFF, 0x29, 0x97, 0xEC, 0xB2, 0x04, 0xA3, 0x2D, 0xF6, 0xE4, 0x24, 0xF3,
	0xAB, 0xAD, 0x5B, 0x47, 0x66, 0xF2, 0xE7, 0xE7, 0xBB, 0x45, 0x5A, 0x93, 0xFE, 0x1F, 0xB2, 0x9C,
	0xEA, 0x4A, 0x5D, 0xCB, 0x32, 0xA7, 0x35, 0xE7, 0xF0, 0x1E, 0x58, 0x55, 0xEF, 0x0B, 0xBC, 0x25,
	0x4E, 0x9F, 0x92, 0xE5, 0x29, 0x30, 0xF2, 0xF1, 0x02, 0xDA, 0x0E, 0xEA, 0x19, 0x98, 0xB7, 0xCE,
	0xE9, 0x13, 0x95, 0xCF, 0x17, 0x7F, 0xD3, 0x90, 0xB9, 0x10, 0x6A, 0x28, 0x61, 0xA1, 0xEE, 0x7F,
	0x43, 0x54, 0xBE, 0xED, 0xCB, 0x41, 0x2D, 0x99, 0x2B, 0x98, 0xD7, 0xCA, 0xE9, 0x13, 0x95, 0xCF,
	0x5C, 0x77, 0x43, 0x3D, 0x92, 0xCF, 0x0E, 0xDE, 0x0C, 0xB2, 0xE7, 0xBB, 0x4D, 0xE6, 0x2B, 0x81,
	0x72, 0x80, 0xD7, 0x85, 0xEC, 0xCD, 0xDD, 0xED, 0x53, 0x8F, 0x3C, 0x8C, 0x61, 0xF0, 0x1C, 0xC8,
	0x9E, 0x4B, 0x1A, 0x50, 0xD7, 0x73, 0x04, 0xBC, 0x4E, 0x64, 0xCF, 0xFD, 0x98, 0xA0, 0xFB, 0xB3,
	0x80, 0xFC, 0x06, 0xAF, 0x14, 0xD9, 0x0B, 0x3E, 0x1C, 0xD2, 0x7C, 0x7A, 0x28, 0x0F, 0x78, 0x53,
	0xC8, 0x5E, 0xE4, 0x28, 0x7D, 0xBE, 0x10, 0x6F, 0x97, 0xD3, 0x27, 0xEA, 0xFD, 0x8B, 0xFE, 0xF6,
	0xD3, 0x7C, 0x55, 0x50, 0x63, 0xE0, 0x59, 0x39, 0x7D, 0xA2, 0xF2, 0xC5, 0x17, 0x4E, 0xD4, 0xFD,
	0x49, 0xBC, 0x51, 0x4E, 0x9F, 0xA8, 0x7C, 0x5E, 0x76, 0x9E, 0x99, 0xA0, 0xC6, 0xC1, 0xD3, 0x73,
	0xFA, 0x44, 0xE5, 0x5B, 0xD7, 0x25, 0xCF, 0x6B, 0x85, 0x79, 0x1B, 0x9C, 0x3E, 0x51, 0xF9, 0xFC,
	0x19, 0xFB, 0x65, 0x02, 0xBC, 0x1D, 0x64, 0x6F, 0x3A, 0xE3, 0xFD, 0x5B, 0x04, 0xAF, 0x8C, 0xD3,
	0x27, 0x6A, 0x3D, 0x63, 0x5B, 0xE9, 0xFD, 0xB2, 0x0C, 0x9E, 0x07, 0xD9, 0x73, 0x69, 0x26, 0x55,
	0x6F, 0x05, 0xBC, 0x26, 0x64, 0x2F, 0x9C, 0xF1, 0x3E, 0x1C, 0x83, 0xE7, 0xCC, 0xE9, 0x65, 0x5E,
	0xE7, 0xE7, 0xF5, 0xB2, 0xEF, 0x2D, 0x79, 0x88, 0x01, 0xF0, 0x9A, 0x91, 0xBD, 0x06, 0x7D, 0x9B,
	0xBA, 0x3F, 0x83, 0xE0, 0xAD, 0x22, 0x7B, 0x2F, 0x7B, 0xC5, 0xDA, 0x94, 0x77, 0x0A, 0x5E, 0x35,
	0xB2, 0xB7, 0xF4, 0xA1, 0xA1, 0x1E, 0x09, 0x79, 0x0E, 0x5E, 0x25, 0xB2, 0x57, 0xDF, 0xA2, 0x53,
	0xF3, 0x85, 0xC0, 0x6B, 0x40, 0xF6, 0xA2, 0xDF, 0x6E, 0x35, 0xDF, 0x05, 0x78, 0x8D, 0xC8, 0x5E,
	0x80, 0x9D, 0xD7, 0x46, 0xA8, 0x30, 0x78, 0x45, 0xC8, 0x9E, 0xBD, 0xFD, 0x8C, 0xE6, 0x23, 0xE7,
	0x59, 0x04, 0xBC, 0x59, 0x4E, 0x9F, 0x92, 0x75, 0xF7, 0x7C, 0xCF, 0x4F, 0x5B, 0x5F, 0xD2, 0x33,
	0x30, 0x6F, 0x9E, 0xD3, 0x27, 0x2A, 0x5F, 0xE8, 0x3A, 0x4E, 0xD7, 0xB3, 0x06, 0xEA, 0x0A, 0x3C,
	0x23, 0xB2, 0xF7, 0xCC, 0xBE, 0x47, 0x0A, 0xF3, 0xFC, 0x9C, 0x3E, 0x51, 0xEB, 0xF9, 0x07, 0x1B,
	0x49, 0x7C, 0x2B,
	
	0x01, 0x01, 0x00, 0x00, 0x57, 0x02, 0x01, 0x00, 0xEC, 0x1C, 0x8B, 0xEE, 0x3B, 0x01, 0x00, 0x00,
	0x78, 0x9C, 0x53, 0xE0, 0x63, 0x66, 0x70, 0xD4, 0x9C, 0xCD, 0x04, 0xC2, 0x0C, 0x0F, 0x2E, 0xFD,			//One big subpacket with sparse numbers (maybe character status?)
	0x13, 0x61, 0xF0, 0x66, 0x64, 0x00, 0x02, 0x8B, 0x17, 0x0F, 0x02, 0x40, 0xF4, 0x83, 0xC5, 0xFC,
	0xEC, 0x20, 0x9A, 0x09, 0x88, 0x6F, 0x7E, 0xD6, 0x65, 0x90, 0x66, 0xC0, 0x0E, 0x18, 0x19, 0xD1,
	0xF9, 0xE8, 0x22, 0xC4, 0x81, 0xC2, 0x70, 0x6B, 0xB0, 0x7D, 0x8E, 0x40, 0xFC, 0x50, 0x44, 0x8F,
	0x41, 0x0B, 0xAF, 0x7D, 0x8C, 0x48, 0x7C, 0xF2, 0xEC, 0x33, 0x3F, 0x7B, 0x85, 0x0D, 0x44, 0x83,
	0xFC, 0xF5, 0x08, 0x68, 0x1F, 0x07, 0x8D, 0xED, 0x5B, 0x14, 0x9D, 0x04, 0xF6, 0x1F, 0x0B, 0x10,
	0xBB, 0x89, 0xEA, 0x31, 0x38, 0xD0, 0xD8, 0xBE, 0x6F, 0xFF, 0x5D, 0xC1, 0xF6, 0x09, 0x00, 0x71,
	0xA1, 0x98, 0x1E, 0x83, 0x05, 0x8D, 0xED, 0x4B, 0x81, 0xC6, 0x1F, 0x28, 0x1C, 0xCB, 0x80, 0xF6,
	0x69, 0xD2, 0xD8, 0x3E, 0xB1, 0x1B, 0x26, 0xE0, 0x28, 0x03, 0xA5, 0xCF, 0x2A, 0xA0, 0x7D, 0x5B,
	0xD0, 0xE4, 0x99, 0x51, 0xEC, 0x43, 0xB6, 0x9F, 0x3C, 0xFB, 0x1C, 0x38, 0x54, 0xC0, 0xF6, 0x25,
	0x03, 0xB1, 0xB5, 0xB8, 0x1E, 0x43, 0x1A, 0x0E, 0x75, 0xD4, 0xF2, 0x5F, 0xB0, 0xE5, 0x0E, 0x76,
	0x98, 0x7D, 0x65, 0x2B, 0xAD, 0x19, 0x92, 0xF0, 0xDA, 0x87, 0xCC, 0x27, 0xCF, 0xBE, 0x6B, 0x2E,
	0x10, 0xFB, 0xAC, 0xA0, 0xF6, 0xA5, 0xD2, 0xD8, 0x3E, 0x4F, 0x2B, 0x88, 0x7D, 0xA0, 0x4C, 0x58,
	0x0E, 0xB4, 0x2F, 0x99, 0xC6, 0xF6, 0x7D, 0x7E, 0x60, 0x00, 0x8F, 0xBF, 0xAB, 0x40, 0xFB, 0xF2,
	0x68, 0x6C, 0xDF, 0x03, 0xA8, 0x7D, 0x1A, 0x40, 0x6C, 0xB9, 0xCA, 0x9A, 0x21, 0x97, 0xC6, 0xF6,
	0xB1, 0x30, 0xB8, 0x81, 0xC3, 0x53, 0x0E, 0x88, 0xE7, 0x02, 0xED, 0xB3, 0xA4, 0xB1, 0x7D, 0x7F,
	0x91, 0xFC, 0xC7, 0xB4, 0xDA, 0x9A, 0x21, 0x9F, 0xC6, 0xF6, 0x1D, 0x60, 0xB7, 0x02, 0xDB, 0x27,
	0x0E, 0xCC, 0xF0, 0x13, 0x2E, 0x58, 0x33, 0x4C, 0xA4, 0xB1, 0x7D, 0x2C, 0x6B, 0xCC, 0xC0, 0xF6,
	0xF1, 0x01, 0xF1, 0x42, 0x39, 0x1B, 0x86, 0xE5, 0x34, 0xB6, 0xCF, 0xF1, 0xFC, 0x0A, 0x70, 0xFC,
	0xF1, 0x02, 0xF1, 0x22, 0xA0, 0x7D, 0xDE, 0x34, 0xB6, 0xEF, 0xCC, 0x87, 0xBF, 0xE0, 0xFA, 0x8F,
	0x15, 0x88, 0x57, 0x01, 0xED, 0x13, 0xC3, 0xA1, 0x8E, 0x09, 0xCD, 0x74, 0x26, 0x20, 0x20, 0xC7,
	0x3E, 0x2F, 0x06, 0x59, 0x78, 0x7B, 0x02, 0x64, 0x9F, 0x3C, 0x0E, 0x75, 0xD4, 0xF2, 0xDF, 0xFB,
	0x37, 0x36, 0xF0, 0xFA, 0x61, 0x35, 0xD0, 0xBE, 0x0E, 0x1C, 0xEA, 0xA8, 0xE5, 0xBF, 0x83, 0x2C,
	0x90, 0xF4, 0x09, 0xF2, 0xE4, 0x1A, 0xA0, 0x7D, 0x95, 0x38, 0xD4, 0x51, 0xCB, 0x7F, 0x76, 0x26,
	0x1C, 0xE0, 0xF0, 0x14, 0x01, 0x62, 0x56, 0x79, 0x1B, 0x06, 0x5D, 0x1A, 0xDB, 0xE7, 0x3E, 0xD7,
	0x01, 0xEC, 0x3F, 0x90, 0xE6, 0x77, 0xE1, 0xB6, 0x0C, 0x5B, 0x71, 0xDA, 0x57, 0x65, 0xC0, 0x84,
	0xC2, 0xC7, 0xB4, 0x4F, 0x40, 0x9D, 0xB0, 0x7D, 0x37, 0x74, 0x4D, 0xE1, 0xF6, 0x6D, 0x8A, 0xB0,
	0x65, 0x68, 0x45, 0x93, 0x47, 0xD4, 0xEF, 0x0E, 0xEB, 0x08, 0xD9, 0x47, 0x0C, 0x98, 0xE9, 0x7C,
	0x81, 0x19, 0x66, 0x9F, 0x59, 0x9D, 0x2D, 0x43, 0x18, 0x0E, 0x75, 0x8C, 0x8C, 0xDB, 0x3F, 0xA0,
	0xF2, 0xC9, 0xF3, 0x5F, 0x40, 0xC5, 0x7A, 0x76, 0x98, 0x7D, 0xB6, 0x40, 0xFB, 0xFC, 0x71, 0xDA,
	0xB7, 0x60, 0x1A, 0x35, 0xEC, 0x3B, 0xA0, 0x86, 0x08, 0xCF, 0xAE, 0x06, 0x5B, 0x86, 0x5A, 0x34,
	0x79, 0x44, 0x78, 0x16, 0x6C, 0x43, 0xB6, 0x80, 0xEC, 0xFA, 0x1D, 0x29, 0xBD, 0xB8, 0x2C, 0xB5,
	0x65, 0xD8, 0x86, 0x43, 0x1D, 0x23, 0xA3, 0x86, 0x19, 0xA1, 0xF8, 0xBB, 0xAB, 0x46, 0xD8, 0x3E,
	0x6F, 0x24, 0xFB, 0x96, 0x03, 0xED, 0xDB, 0x8E, 0xD3, 0xBE, 0x3B, 0xEA, 0xD4, 0x48, 0x9F, 0x8F,
	0xA4, 0xAC, 0xE1, 0xF6, 0x5D, 0x5D, 0x66, 0xCB, 0x70, 0x08, 0xA7, 0x7D, 0xA6, 0x5F, 0x08, 0x85,
	0x27, 0x31, 0xF6, 0x71, 0x58, 0x23, 0xE2, 0xCF, 0x6C, 0xB9, 0x2D, 0xC3, 0x3A, 0x34, 0x79, 0x6A,
	0xE7, 0x07, 0x00, 0xA6, 0x4D, 0x72, 0x75, 
	
	0x01, 0x01, 0x00, 0x00, 0xA5, 0x02, 0x01, 0x00, 0xF9, 0x1C, 0x8B, 0xEE, 0x3B, 0x01, 0x00, 0x00,
	0x78, 0x9C, 0xAD, 0xD6, 0x4B, 0x68, 0x13, 0x41, 0x18, 0x00, 0xE0, 0x7F, 0x36, 0x52, 0xAB, 0x04,			//One big subpacket with sparse numbers (maybe character status?)
	0x4D, 0x41, 0x50, 0x83, 0x8F, 0x28, 0xD8, 0xA0, 0xC5, 0x07, 0x29, 0x95, 0xD8, 0xD4, 0x35, 0x0F,
	0x09, 0x55, 0x17, 0x29, 0x42, 0xC5, 0x43, 0x11, 0x95, 0x8A, 0xD8, 0x40, 0x31, 0x95, 0x66, 0x65,
	0xA5, 0x46, 0xAD, 0x92, 0xD2, 0xD6, 0xA0, 0x45, 0x7C, 0x44, 0xA4, 0x87, 0xA2, 0x50, 0x0F, 0xE2,
	0xC1, 0x07, 0x16, 0x1F, 0xA1, 0x82, 0x8A, 0x20, 0x8A, 0x17, 0xA5, 0xAD, 0x10, 0xA4, 0x8A, 0x87,
	0x7A, 0x2B, 0x82, 0x07, 0x1F, 0x13, 0xB1, 0xB3, 0x3B, 0x1B, 0x7F, 0x66, 0x08, 0xFB, 0x43, 0x18,
	0x66, 0xE6, 0x87, 0x8F, 0x99, 0x7F, 0xFE, 0x24, 0xBE, 0x79, 0x2E, 0x88, 0xAC, 0xBE, 0xA6, 0x14,
	0x3F, 0x50, 0x78, 0xF7, 0x6B, 0x01, 0xEC, 0x20, 0x40, 0x23, 0xF8, 0xB5, 0xD0, 0x54, 0x1C, 0x63,
	0x27, 0xAA, 0x2B, 0x8B, 0x63, 0x71, 0x31, 0xE9, 0x55, 0xA1, 0x0D, 0xF8, 0x70, 0xFD, 0x1B, 0x09,
	0xF9, 0xA9, 0x28, 0x96, 0x75, 0x42, 0xC3, 0x96, 0x0A, 0x1E, 0xBF, 0x7D, 0xA5, 0x34, 0x46, 0xC6,
	0x6E, 0xCD, 0x9E, 0xF1, 0x0C, 0xEA, 0x65, 0x91, 0x3C, 0x42, 0x42, 0x19, 0xC2, 0xCD, 0xCB, 0xF3,
	0x0E, 0x5C, 0x0F, 0xB3, 0xF3, 0x9D, 0x8D, 0xA8, 0x30, 0x82, 0x7A, 0xEE, 0xFD, 0x22, 0xAF, 0x7D,
	0xB9, 0xD8, 0xBB, 0x38, 0xBC, 0x91, 0x79, 0x3D, 0xD4, 0x4B, 0xA3, 0xDE, 0x8D, 0xAC, 0x13, 0xE7,
	0x9B, 0xBE, 0xCD, 0x7B, 0x4F, 0x50, 0xEF, 0x8E, 0xB0, 0x7E, 0x32, 0xB1, 0xCF, 0x72, 0x9F, 0x3B,
	0xA3, 0x2A, 0x3C, 0x44, 0xBD, 0x42, 0xC8, 0x09, 0xAF, 0x6A, 0x7D, 0x1D, 0xF3, 0x52, 0x31, 0x15,
	0x7A, 0x6D, 0xFB, 0xE6, 0xFB, 0x74, 0xC6, 0xBB, 0xFB, 0xB9, 0x8D, 0xBD, 0x4F, 0xF7, 0x79, 0x15,
	0x62, 0x48, 0x1E, 0x21, 0x7A, 0x8A, 0x9F, 0x97, 0x57, 0xBF, 0xE0, 0x47, 0x3F, 0xF3, 0x06, 0x2F,
	0xA8, 0x10, 0x41, 0xBD, 0x64, 0x97, 0x13, 0xDE, 0xF7, 0xB7, 0xAB, 0xD8, 0x7D, 0xBE, 0x1A, 0x50,
	0xE1, 0x90, 0x6D, 0xDF, 0xBC, 0xCF, 0xFC, 0xA4, 0xC8, 0x93, 0x09, 0xD7, 0x15, 0xF3, 0xBD, 0x0C,
	0xE4, 0x34, 0x18, 0x46, 0xF2, 0x08, 0x59, 0x14, 0x71, 0xA2, 0x1F, 0x7E, 0x5B, 0xFA, 0x21, 0x95,
	0xD7, 0xE0, 0x29, 0xEA, 0x85, 0xBB, 0x44, 0x9E, 0x4C, 0x74, 0xE8, 0x84, 0xD5, 0xEF, 0x1C, 0xF5,
	0xA2, 0x48, 0x9E, 0x42, 0xD6, 0x06, 0xB8, 0xB9, 0xC2, 0xB5, 0xE3, 0xDF, 0x90, 0x39, 0x5F, 0xED,
	0x07, 0xB3, 0x7E, 0xCA, 0xA8, 0x06, 0x87, 0x6D, 0xFB, 0x66, 0xFD, 0x3C, 0x9D, 0x4E, 0xF4, 0x43,
	0x60, 0xFB, 0x8F, 0x8A, 0x19, 0xEF, 0x8B, 0xDE, 0x02, 0xF3, 0x51, 0xCF, 0x99, 0xFB, 0xCC, 0x56,
	0xB7, 0x32, 0xEF, 0xD3, 0xD2, 0x04, 0xCC, 0x42, 0xBD, 0xCC, 0x71, 0x91, 0x97, 0x29, 0xB9, 0xE1,
	0xD2, 0xD8, 0x6A, 0x39, 0x9F, 0xB6, 0x2C, 0x01, 0x1E, 0xD4, 0x3B, 0x36, 0x6D, 0x5D, 0xFF, 0x9F,
	0xA7, 0x4B, 0x78, 0x9E, 0x74, 0x9E, 0x79, 0xDD, 0x9B, 0x0C, 0x68, 0x44, 0xF2, 0x08, 0x79, 0xBD,
	0x44, 0xE4, 0xC9, 0xBC, 0x97, 0xB1, 0xA9, 0x06, 0xF6, 0x5E, 0xEE, 0xD5, 0x1B, 0x90, 0x41, 0x3D,
	0x57, 0x80, 0x9F, 0x97, 0xE7, 0xED, 0x0D, 0x2F, 0x64, 0xFD, 0x70, 0x9F, 0x7A, 0x3E, 0xD4, 0x5B,
	0xB3, 0xD8, 0x09, 0x6F, 0xD7, 0x37, 0xF3, 0x7C, 0x0F, 0xA8, 0xD7, 0x87, 0x7A, 0x67, 0x6A, 0x45,
	0xDE, 0x90, 0x57, 0xEC, 0x35, 0xC7, 0xCD, 0xEF, 0xB3, 0xE7, 0xD4, 0x3B, 0x8A, 0x7A, 0x89, 0x1A,
	0x91, 0x27, 0x73, 0xBE, 0xCB, 0x96, 0xFF, 0x13, 0x6F, 0x42, 0x06, 0x9C, 0x44, 0xBD, 0x23, 0x42,
	0x4F, 0x26, 0xEA, 0xE6, 0x04, 0x99, 0xD7, 0xBA, 0xD9, 0x80, 0x6E, 0xD4, 0x5B, 0x11, 0x16, 0x79,
	0x5A, 0x85, 0xD8, 0x9B, 0xF4, 0x86, 0x98, 0xD7, 0xAF, 0x1A, 0xF0, 0x0C, 0xF5, 0x2E, 0xC5, 0x45,
	0x9E, 0x4C, 0x8C, 0x56, 0xD6, 0x33, 0xAF, 0x79, 0x8B, 0x01, 0x57, 0x51, 0xCF, 0xDD, 0x20, 0xF2,
	0x64, 0xEA, 0x97, 0xEB, 0x98, 0xCB, 0xFA, 0x61, 0x0F, 0xF5, 0x92, 0xA8, 0x17, 0xD8, 0xE0, 0x84,
	0x37, 0xDE, 0x79, 0x93, 0x79, 0x55, 0x3D, 0x06, 0x6C, 0x43, 0xBD, 0xA9, 0x28, 0x3F, 0x2F, 0xCF,
	0x9B, 0x68, 0x34, 0xFB, 0xE1, 0x3D, 0xF5, 0xFA, 0x51, 0x4F, 0xD9, 0xED, 0x84, 0xD7, 0xAE, 0x9B,
	0xFD, 0xFE, 0xB2, 0xD7, 0x80, 0x1C, 0xEA, 0x3D, 0x4E, 0xF3, 0xF3, 0x52, 0xCF, 0xBF, 0x52, 0xEC,
	0x8D, 0x9F, 0xE2, 0xBD, 0x17, 0xA8, 0xD7, 0x74, 0x5A, 0xE4, 0xC9, 0xC4, 0x84, 0x6F, 0x88, 0xD5,
	0x6F, 0x5D, 0x9F, 0x01, 0x71, 0x24, 0x8F, 0x90, 0xC1, 0x83, 0x22, 0xEF, 0x91, 0xC4, 0xEF, 0xD1,
	0x1F, 0x8D, 0x07, 0x8B, 0x14
};

static const uint8 g_client0_answer10[0x63F] = 
{
	0x01, 0x01, 0x00, 0x00, 0x73, 0x02, 0x01, 0x00, 0x51, 0x1D, 0x8B, 0xEE, 0x3B, 0x01, 0x00, 0x00,
	0x78, 0x9C, 0xB5, 0xD5, 0x5F, 0x48, 0x53, 0x51, 0x1C, 0x07, 0xF0, 0xDF, 0x51, 0xB6, 0x15, 0x84,			//Again, sub packets with sparse numbers (because we just like them)
	0xF4, 0x67, 0x10, 0xAC, 0x02, 0x4D, 0x73, 0x1B, 0x12, 0xFD, 0x43, 0xA9, 0xA9, 0x30, 0xE9, 0x0F,
	0xB8, 0x19, 0x09, 0x51, 0xDA, 0x8B, 0xA8, 0x14, 0x09, 0x45, 0x48, 0xA5, 0xE1, 0x3D, 0x04, 0x16,
	0xA4, 0x6E, 0x18, 0x7B, 0x88, 0xE8, 0x41, 0x41, 0xE8, 0x69, 0x4F, 0x13, 0xE9, 0xA1, 0x1E, 0x12,
	0x0A, 0xEC, 0xC5, 0xF5, 0x92, 0xA4, 0x52, 0xA0, 0xF8, 0x54, 0x83, 0x32, 0x03, 0x7B, 0x29, 0x32,
	0x3B, 0xF7, 0x61, 0xBF, 0xBB, 0xAD, 0x7E, 0xFD, 0x0E, 0x72, 0xFA, 0xC1, 0xB8, 0xDC, 0xDD, 0xC3,
	0xFD, 0xF0, 0x3D, 0xE7, 0x9E, 0xF3, 0x2B, 0x2D, 0x29, 0x86, 0x86, 0xE0, 0x48, 0x91, 0xFD, 0x83,
	0xA5, 0x99, 0x5F, 0x5E, 0x88, 0x0A, 0x50, 0x75, 0x34, 0xB3, 0xD4, 0x6C, 0x5F, 0x8F, 0x47, 0xBB,
	0xDC, 0xF6, 0xD5, 0xFE, 0xD3, 0x77, 0xDF, 0x02, 0x17, 0xFC, 0xBD, 0x84, 0x68, 0xBE, 0x9B, 0x7F,
	0x2F, 0x04, 0x31, 0xF4, 0x9F, 0x35, 0xE7, 0x09, 0x6D, 0xCA, 0x7A, 0x7D, 0xCA, 0x7B, 0x40, 0x7A,
	0x37, 0xE3, 0x9C, 0xB7, 0xD5, 0xCF, 0x7B, 0xD3, 0x9F, 0xEB, 0xD0, 0x7B, 0x97, 0xB0, 0x60, 0x80,
	0xF4, 0x92, 0x1D, 0x9C, 0xA7, 0x53, 0x5B, 0x1A, 0xC3, 0xE8, 0x2D, 0x28, 0x2F, 0x41, 0x7A, 0x99,
	0x46, 0xCE, 0xD3, 0xC9, 0x37, 0x78, 0xB1, 0x0E, 0xD7, 0xEF, 0x64, 0xCA, 0xFA, 0xE3, 0x79, 0x31,
	0xBE, 0xBF, 0xD0, 0xDF, 0x58, 0xBE, 0x78, 0x8E, 0x77, 0x6D, 0xD6, 0x82, 0x22, 0xD2, 0x5B, 0x2B,
	0xE3, 0x3C, 0x9D, 0x7C, 0x57, 0x17, 0xC7, 0x3C, 0x59, 0xEF, 0xC0, 0x9C, 0x05, 0xAD, 0xC4, 0x38,
	0x21, 0xCA, 0xF6, 0x99, 0xF0, 0x3E, 0xF8, 0x6A, 0x71, 0xFD, 0x9E, 0xCC, 0x5B, 0x30, 0x45, 0x7A,
	0xE9, 0x90, 0x09, 0x2F, 0x96, 0x33, 0x9F, 0x97, 0x7E, 0x5A, 0x50, 0xF8, 0x12, 0xD3, 0xEB, 0xF7,
	0xFD, 0xFC, 0x17, 0x9C, 0xCF, 0x48, 0x85, 0x84, 0x6E, 0x62, 0x9C, 0x10, 0xF5, 0x61, 0xCE, 0xD3,
	0xC9, 0x77, 0xAE, 0xA5, 0x16, 0xBD, 0x47, 0x95, 0x12, 0x02, 0xA4, 0x37, 0x78, 0xD8, 0x84, 0xD7,
	0x9F, 0xAA, 0xC1, 0xF5, 0xBB, 0xEC, 0x97, 0xF0, 0x9C, 0xF4, 0xBA, 0xAB, 0x38, 0x4F, 0xA7, 0x26,
	0x57, 0xD6, 0x70, 0xFD, 0xF6, 0x06, 0x24, 0x78, 0x49, 0x6F, 0xA8, 0x92, 0xF3, 0x74, 0xF2, 0xCD,
	0xDE, 0x76, 0xCE, 0x33, 0xDB, 0x7B, 0x46, 0x7A, 0x8B, 0x07, 0x39, 0x4F, 0xA7, 0xC2, 0xFD, 0xF9,
	0xDE, 0xE4, 0x7F, 0xF6, 0x7E, 0x6C, 0xF7, 0xBB, 0xB2, 0xDE, 0x6A, 0x44, 0x42, 0x0B, 0xE9, 0xCD,
	0x1B, 0x39, 0x3F, 0x8F, 0x94, 0x4F, 0xE3, 0xF7, 0xD9, 0x1E, 0x95, 0xD0, 0x46, 0x7A, 0x2F, 0x2B,
	0x4C, 0x78, 0x23, 0xE9, 0x24, 0x7A, 0x2F, 0x94, 0x17, 0x21, 0xBD, 0xD6, 0x5D, 0x26, 0xBC, 0x89,
	0xD1, 0x71, 0xF4, 0xAA, 0x9A, 0x24, 0x9C, 0x25, 0xBD, 0x65, 0xF6, 0x3C, 0xD3, 0x29, 0xB9, 0x1E,
	0x44, 0xEF, 0x9E, 0xF2, 0xCA, 0x49, 0x6F, 0x65, 0x37, 0xE7, 0xE9, 0xE4, 0x7B, 0xBC, 0xB0, 0x8A,
	0xFB, 0xEF, 0xA3, 0xF2, 0x76, 0x90, 0xDE, 0xAD, 0xA0, 0x09, 0x2F, 0x93, 0xDB, 0x1F, 0x4E, 0x4B,
	0x78, 0x45, 0x7A, 0xD5, 0xD5, 0x26, 0xBC, 0xCD, 0x70, 0x0A, 0xE7, 0x73, 0xEC, 0x8C, 0x84, 0x10,
	0x31, 0x4E, 0x88, 0x1A, 0x23, 0xFD, 0x6F, 0x38, 0xA7, 0x1F, 0xB5, 0x5F, 0x97, 0xD8, 0x7F, 0xB2,
	0xE5, 0xF4, 0xA3, 0x51, 0x23, 0xFB, 0xE1, 0x53, 0x9F, 0x73, 0xBE, 0x0C, 0xDD, 0x90, 0x90, 0x24,
	0xC6, 0x09, 0x11, 0x68, 0xE0, 0x3C, 0x9D, 0x8A, 0xED, 0x4F, 0xE3, 0x7C, 0x7E, 0x55, 0xDE, 0x05,
	0xD2, 0x9B, 0x38, 0xC6, 0x79, 0x3A, 0xF9, 0x5C, 0xCB, 0x4E, 0xBE, 0x64, 0xAF, 0x84, 0x18, 0xE9,
	0x35, 0xED, 0xE1, 0x3C, 0x9D, 0x4A, 0xA4, 0x3A, 0x31, 0xDF, 0x15, 0x19, 0x83, 0x13, 0xA4, 0xF7,
	0x74, 0x1B, 0xE7, 0xE9, 0xE4, 0x73, 0xB7, 0x39, 0xFD, 0xB6, 0x47, 0x79, 0x77, 0x48, 0xEF, 0x9B,
	0x8F, 0xF3, 0x74, 0xEA, 0xCD, 0xEB, 0xB7, 0xF8, 0x7D, 0x4E, 0xED, 0x8C, 0x83, 0x9B, 0xF4, 0x1E,
	0x7A, 0xF3, 0xEF, 0x37, 0x96, 0x6F, 0xA6, 0xC0, 0xF3, 0x90, 0xDE, 0x38, 0x9B, 0x4F, 0xC7, 0x03,
	0xD7, 0x21, 0x9C, 0xCF, 0xF7, 0xCA, 0xEB, 0x2A, 0x78, 0xEC, 0xEC, 0x3F, 0x33, 0xDE, 0x6F, 0x0C,
	0x12, 0x8B, 0x51, 
	
	0x01, 0x01, 0x00, 0x00, 0x0A, 0x02, 0x01, 0x00, 0x6E, 0x1D, 0x8B, 0xEE, 0x3B, 0x01, 0x00, 0x00,
	0x78, 0x9C, 0xB5, 0xD7, 0xCF, 0x2B, 0xC3, 0x61, 0x1C, 0x07, 0xF0, 0x67, 0x3F, 0xCC, 0xA8, 0x2D,
	0x09, 0xED, 0x62, 0xB9, 0x48, 0x2B, 0x07, 0xB2, 0x46, 0x6B, 0x62, 0x65, 0x1C, 0x96, 0xB2, 0x70,
	0x10, 0xE5, 0xBC, 0x0B, 0x0E, 0x5A, 0xF9, 0xD1, 0xEE, 0xBB, 0xAE, 0xE8, 0x61, 0xEC, 0xE0, 0xB0,
	0xB4, 0x21, 0x5F, 0x9C, 0x8C, 0x72, 0x21, 0x17, 0x11, 0xFE, 0x80, 0x15, 0x6A, 0xA2, 0x96, 0x98,
	0x83, 0x32, 0x3E, 0xCF, 0xB3, 0x6F, 0xDF, 0x69, 0x79, 0x4A, 0x7A, 0x3E, 0x4F, 0x7D, 0xFA, 0x66,
	0xBD, 0xBF, 0x7B, 0xED, 0xF3, 0xFC, 0xF8, 0xF6, 0xD5, 0x64, 0x35, 0x10, 0xAF, 0x23, 0xA6, 0x67,
	0x45, 0x32, 0xD7, 0x85, 0x3A, 0xE2, 0xD7, 0x11, 0x18, 0x5D, 0xD9, 0xCC, 0x10, 0xBB, 0x3E, 0x7E,
	0xF9, 0x2A, 0xD9, 0xD5, 0x0C, 0x15, 0x5C, 0xA5, 0xA4, 0x93, 0xFC, 0x3E, 0x74, 0xBA, 0xF2, 0xBF,
	0xCB, 0x3F, 0xF9, 0xE3, 0xD8, 0x72, 0x99, 0xF9, 0xFD, 0xAA, 0x97, 0x10, 0xC4, 0xF4, 0x65, 0xDF,
	0xAE, 0x87, 0xF1, 0x1F, 0x6E, 0x93, 0xF4, 0xF3, 0xFE, 0x8C, 0x50, 0x53, 0xE0, 0x75, 0x0B, 0x72,
	0xB2, 0xFA, 0xCB, 0x50, 0x3F, 0xF7, 0x0C, 0x50, 0x33, 0xE0, 0xB5, 0x20, 0x7B, 0x87, 0xCA, 0x05,
	0xF7, 0xD8, 0xCD, 0x83, 0x31, 0x4A, 0xC6, 0x91, 0xBD, 0xF4, 0x0F, 0xCF, 0x9D, 0xA0, 0x64, 0x02,
	0xD9, 0xDB, 0xEB, 0xEF, 0xE5, 0xFB, 0x85, 0x2D, 0x7E, 0x04, 0xBC, 0x10, 0xB2, 0xD7, 0x62, 0x3D,
	0xD6, 0xFA, 0x7B, 0x02, 0x6F, 0x14, 0xD9, 0x0B, 0x1C, 0x0D, 0x68, 0xFB, 0x25, 0x07, 0x9E, 0x13,
	0xD9, 0xEB, 0x08, 0x1B, 0xB9, 0x57, 0x0D, 0x55, 0x95, 0xA4, 0xA4, 0x11, 0xD9, 0x8B, 0x2E, 0x7A,
	0xF8, 0xFA, 0xB1, 0xFE, 0xAE, 0xC1, 0x53, 0x04, 0x39, 0x59, 0xE7, 0x7D, 0x6E, 0xA7, 0xF8, 0x7C,
	0xA9, 0x56, 0xBD, 0xB4, 0x20, 0x27, 0xAB, 0x3F, 0x6A, 0xF5, 0x72, 0xCF, 0x0E, 0x75, 0x03, 0xDE,
	0x3A, 0xB2, 0x17, 0x57, 0xBD, 0x0A, 0xD5, 0x8B, 0x0B, 0x72, 0xB2, 0xE6, 0x33, 0xA4, 0xAE, 0x1F,
	0x9B, 0xCF, 0x5B, 0xF0, 0x76, 0x05, 0x39, 0x59, 0xFD, 0xDD, 0x5D, 0x16, 0xCF, 0x03, 0xFB, 0xB1,
	0x2B, 0x29, 0x4A, 0x7A, 0x90, 0xBD, 0xE5, 0xD3, 0x5A, 0xED, 0x3C, 0xAC, 0x82, 0x67, 0x47, 0xF6,
	0x4E, 0x2B, 0xDD, 0xDA, 0xF3, 0x8C, 0x79, 0x51, 0x41, 0x4E, 0xD6, 0xFA, 0x05, 0xCE, 0x9F, 0x4D,
	0xEC, 0xDA, 0x07, 0x15, 0x03, 0xCF, 0x22, 0xC8, 0xC9, 0xEA, 0xAF, 0xD1, 0x34, 0xC6, 0xE7, 0xD3,
	0xA4, 0x7A, 0xED, 0x82, 0x9C, 0xAC, 0xFE, 0xC2, 0xEF, 0xD3, 0xDA, 0x7E, 0x59, 0x03, 0xCF, 0x87,
	0xEC, 0xF9, 0xBC, 0x76, 0xEE, 0x39, 0xA0, 0x36, 0xC0, 0x6B, 0x16, 0xE4, 0x64, 0xCD, 0xA7, 0xA5, 
	0x30, 0xAC, 0xCD, 0x27, 0xF3, 0xDA, 0x04, 0x39, 0x59, 0xFD, 0x1D, 0xE4, 0x3E, 0xF9, 0x7E, 0xB1,
	0x41, 0xBD, 0x6C, 0x53, 0x52, 0x2F, 0xC8, 0xC9, 0xEA, 0xCF, 0xE9, 0x34, 0xF3, 0xFE, 0xD8, 0xF3,
	0xEC, 0x15, 0xBC, 0x56, 0x64, 0xAF, 0xC1, 0x5C, 0x3A, 0x7F, 0x79, 0xF0, 0x96, 0x90, 0xBD, 0x91,
	0x37, 0x13, 0xEF, 0xAF, 0x06, 0xEA, 0x03, 0x3C, 0x1B, 0xB2, 0x17, 0x54, 0xDF, 0x97, 0xD8, 0xCD,
	0x05, 0xF0, 0x66, 0x05, 0x39, 0x59, 0xFB, 0x65, 0x72, 0xC1, 0xA3, 0x79, 0xF7, 0x0A, 0x25, 0x29,
	0x64, 0x4F, 0x89, 0xB8, 0xB4, 0xF7, 0x89, 0x07, 0xF0, 0xCE, 0x04, 0x39, 0x59, 0xF3, 0x19, 0x8A,
	0x94, 0xFE, 0x5F, 0xC9, 0x82, 0x77, 0x82, 0xEC, 0xE5, 0xE7, 0x8B, 0xF3, 0xC9, 0xDE, 0xCB, 0xAE,
	0xF6, 0x29, 0x49, 0x22, 0x7B, 0xDF, 0x05, 0x3E, 0x7F, 0x15, 
	
	0x01, 0x01, 0x00, 0x00, 0xC2, 0x01, 0x0C, 0x00, 0x7A, 0x1D, 0x8B, 0xEE, 0x3B, 0x01, 0x00, 0x00, 
	0x78, 0x9C, 0xDD, 0xD7, 0xBB, 0x4E, 0x02, 0x41, 0x14, 0x06, 0xE0, 0xB3, 0x2C, 0x97, 0x05, 0x04,
	0x44, 0xD7, 0xDE, 0x52, 0x5F, 0xC0, 0x18, 0x63, 0x21, 0xA2, 0x20, 0xE0, 0x05, 0x95, 0x17, 0x30,
	0x34, 0xBE, 0x80, 0x34, 0x58, 0xD8, 0x5A, 0x88, 0x8D, 0x31, 0x9B, 0x58, 0x78, 0x8B, 0x86, 0x44,
	0x13, 0x13, 0xE8, 0xB4, 0xB2, 0xB4, 0xD5, 0x17, 0x20, 0xB1, 0xB1, 0x33, 0xB1, 0xB3, 0x21, 0xFE,
	0x87, 0x8B, 0x91, 0x0D, 0x1B, 0x89, 0xD9, 0x39, 0x85, 0x27, 0x39, 0x33, 0x61, 0x33, 0xEC, 0x37,
	0x33, 0x3B, 0x3B, 0x03, 0x55, 0x5D, 0xA7, 0xC4, 0xE4, 0x89, 0x87, 0x93, 0x1A, 0xCF, 0x4D, 0x93,
	0x32, 0x1A, 0x21, 0xA6, 0xDF, 0x1A, 0x79, 0xAE, 0x2F, 0xA2, 0x09, 0x83, 0x6B, 0x1F, 0xF2, 0xA5,
	0x6E, 0xD1, 0x29, 0xF5, 0x0F, 0x4D, 0xB3, 0x7F, 0xB6, 0x5F, 0x19, 0x2C, 0x8E, 0x6E, 0xA6, 0x5A,
	0x5E, 0x10, 0x19, 0xBD, 0xB7, 0xE8, 0x4C, 0xB1, 0x77, 0xBE, 0xDF, 0xF6, 0xF8, 0xCB, 0x25, 0x78,
	0x8F, 0x8A, 0xBD, 0xAD, 0xDD, 0xD9, 0x96, 0x17, 0x67, 0xFB, 0xC1, 0xA2, 0x3B, 0xC5, 0x5E, 0xAD,
	0xE3, 0x45, 0x90, 0x97, 0xF0, 0x6A, 0x8A, 0xBD, 0x4A, 0x2C, 0xF1, 0x3D, 0x9F, 0x99, 0x27, 0x8B,
	0xEA, 0x8A, 0xBD, 0x8F, 0xCE, 0x7A, 0xE1, 0xF5, 0x99, 0x85, 0x77, 0xA5, 0xD8, 0xDB, 0x29, 0xB7,
	0xE7, 0x93, 0x8B, 0x1C, 0xBC, 0x5B, 0xC5, 0x9E, 0xD1, 0xA9, 0x27, 0xC8, 0xFE, 0x9E, 0xA6, 0x7B,
	0xDE, 0x53, 0x72, 0x6C, 0x97, 0xEA, 0x69, 0xC7, 0xD7, 0x43, 0xE4, 0x75, 0xF5, 0x7E, 0x5E, 0xCC,
	0xBE, 0xBB, 0xFD, 0x0B, 0xB8, 0x7A, 0xBF, 0x39, 0xAD, 0x48, 0xE3, 0x01, 0x7B, 0xBB, 0x6C, 0x4F,
	0xBB, 0xF7, 0x52, 0xC1, 0xCF, 0x75, 0xED, 0xD8, 0xA4, 0xC4, 0x7C, 0x8C, 0x9C, 0x1E, 0xD6, 0x9F,
	0x1E, 0x62, 0x9F, 0xE8, 0x7A, 0x9F, 0x58, 0xB8, 0x49, 0x78, 0x5E, 0x21, 0xEF, 0x00, 0xDE, 0x02,
	0x3C, 0x8F, 0x90, 0x57, 0x44, 0xB9, 0x08, 0x2F, 0x28, 0xE4, 0x1D, 0xA2, 0x4C, 0xC1, 0xF3, 0x09,
	0x79, 0x4D, 0x9D, 0x28, 0x0D, 0x2F, 0x20, 0xE4, 0x6D, 0x63, 0x60, 0x4B, 0xF0, 0x9C, 0xC2, 0x6D,
	0xEF, 0x15, 0x99, 0x81, 0xA7, 0x0B, 0x79, 0x15, 0x64, 0x16, 0x9E, 0xE1, 0xD0, 0xCE, 0x6D, 0xAF,
	0x8C, 0xCC, 0xC1, 0x1B, 0x12, 0xF2, 0xAE, 0x91, 0xCB, 0xF0, 0xC2, 0x42, 0xDE, 0x1E, 0x72, 0x05,
	0x9E, 0x5F, 0xC8, 0x9B, 0x41, 0xAE, 0xC2, 0x0B, 0x09, 0x79, 0xBC, 0x8F, 0xAD, 0xC1, 0x1B, 0x13,
	0xF2, 0xF8, 0x3D, 0xC8, 0xC3, 0x1B, 0x15, 0xF2, 0x78, 0x7C, 0xEB, 0xF0, 0x46, 0x14, 0x7B, 0xD5,
	0x5F, 0xFE, 0x07, 0xFC, 0x1C, 0xFF, 0x06, 0xFA, 0x33, 0xAC, 0xB8, 0x3F, 0x5D, 0x8F, 0xCF, 0xC5,
	0x4D, 0x78, 0xA6, 0x90, 0xC7, 0xE3, 0x2B, 0xC0, 0x8B, 0x0B, 0x79, 0x1E, 0x6C, 0x74, 0xC1, 0x64,
	0x8C, 0xA2, 0x42, 0x9E, 0x81, 0x05, 0x15, 0x82, 0x17, 0x11, 0xF2, 0x4C, 0x9C, 0x57, 0x61, 0x78,
	0x4E, 0x27, 0x96, 0x5B, 0xDE, 0x7F, 0x8F, 0xEE, 0xFE, 0x3D, 0xE8, 0xEF, 0xE2, 0x2F, 0x91, 0x2E,
	0xBC, 0x52
};

static const uint8 g_client0_answer11[0x5BA] = 
{
	0x01, 0x01, 0x00, 0x00, 0xBA, 0x05, 0x1D, 0x00, 0xC9, 0x1D, 0x8B, 0xEE, 0x3B, 0x01, 0x00, 0x00,
	0x78, 0x9C, 0xBD, 0x96, 0x0D, 0x58, 0x4C, 0x59, 0x18, 0xC7, 0xCF, 0x7B, 0xE7, 0x4A, 0x52, 0x53,
	0xB1, 0x5B, 0x1E, 0x8B, 0x22, 0x6C, 0xB1, 0x19, 0x1A, 0xDB, 0xA4, 0x55, 0x9A, 0x58, 0x3D, 0x68,
	0xCD, 0xD0, 0x62, 0x58, 0x6D, 0x86, 0x4A, 0x1F, 0x46, 0x24, 0xBB, 0x52, 0x69, 0x2C, 0xAD, 0xE4,
	0x9B, 0x94, 0xD0, 0x1A, 0x2B, 0xB4, 0x7D, 0xAD, 0x8F, 0xA7, 0xC7, 0x57, 0xBB, 0xC2, 0xCC, 0x46,
	0x8F, 0x62, 0x11, 0xFB, 0xD0, 0x6A, 0x22, 0x9B, 0xCF, 0xD5, 0xDA, 0xDD, 0xB6, 0xD9, 0x54, 0x7B,
	0xCE, 0x6D, 0xC2, 0x9D, 0x3B, 0x6D, 0x6A, 0x6D, 0xEF, 0xF3, 0x9C, 0x73, 0x7E, 0xF7, 0xDC, 0xFF,
	0x79, 0xDF, 0xF7, 0xBC, 0xF7, 0x9E, 0x3B, 0xE3, 0x88, 0x78, 0x48, 0xEC, 0xB4, 0x8B, 0x22, 0x0D,
	0x69, 0xAF, 0x34, 0xBE, 0x85, 0xC6, 0x03, 0xC2, 0xE6, 0x76, 0x5F, 0x2B, 0x25, 0x23, 0x33, 0xDF,
	0x25, 0x10, 0x65, 0xF2, 0x0C, 0x75, 0x13, 0x58, 0xBA, 0x83, 0x9F, 0x41, 0x57, 0x32, 0x92, 0xC9,
	0x09, 0x09, 0xFD, 0xB0, 0x57, 0xB6, 0xB5, 0x5C, 0x03, 0x7A, 0x33, 0xF6, 0x6A, 0xBC, 0x89, 0x38,
	0x9E, 0x49, 0x27, 0xC6, 0xFB, 0x08, 0xC7, 0xA3, 0x3B, 0x31, 0xDE, 0x64, 0x1C, 0x8F, 0xEA, 0xC4,
	0x78, 0x12, 0x1C, 0xAF, 0x4B, 0x27, 0xC6, 0x53, 0x24, 0xF6, 0xE3, 0xDC, 0xFF, 0x3F, 0xE3, 0x45, 
	0xE0, 0x78, 0x86, 0x7E, 0xDF, 0x74, 0xBC, 0xCE, 0xB6, 0xAE, 0xFA, 0xD1, 0x91, 0x73, 0x9E, 0x7D, 
	0x58, 0xE7, 0x14, 0xB5, 0xAA, 0xE3, 0x9E, 0x7B, 0x07, 0xD4, 0x88, 0x64, 0x1C, 0xDD, 0x64, 0x03,
	0x7F, 0x67, 0x71, 0x33, 0x45, 0xAB, 0x70, 0x6F, 0x86, 0xB6, 0xE1, 0xBE, 0x1B, 0x33, 0x6B, 0x8E,
	0xD4, 0xB8, 0xEF, 0xCE, 0xD4, 0xD3, 0x02, 0x2D, 0xC2, 0x3D, 0x1F, 0x69, 0x18, 0x65, 0xB3, 0xB5,
	0xE5, 0xD7, 0x12, 0xCD, 0xC4, 0xBD, 0x0D, 0xB3, 0xAF, 0xB7, 0x51, 0x48, 0x9B, 0xFB, 0x6F, 0x79, 
	0x7E, 0x1D, 0xDF, 0xFF, 0xC2, 0xD7, 0xD4, 0x25, 0xB3, 0x74, 0x54, 0x7C, 0xF7, 0x78, 0xE3, 0xBA, 
	0xF4, 0xD7, 0xF4, 0x97, 0x61, 0x54, 0xE7, 0xC6, 0xD1, 0xA5, 0x18, 0xD5, 0x35, 0xDB, 0xCB, 0xB7, 
	0xD6, 0x8B, 0xB3, 0x6E, 0x07, 0x6B, 0x9D, 0x5F, 0x48, 0xC4, 0xBC, 0xF0, 0x88, 0xB9, 0x11, 0xAD,
	0xD5, 0x91, 0x9B, 0x5F, 0x1A, 0x6B, 0xBD, 0x9D, 0x5E, 0xA7, 0xE2, 0xE8, 0x76, 0xB2, 0x74, 0x75,
	0x8C, 0x6A, 0xF4, 0x2F, 0xFD, 0x8B, 0x8E, 0xB3, 0x03, 0xE8, 0x98, 0xDE, 0x9E, 0x1B, 0x59, 0x69,
	0xB8, 0x95, 0x17, 0xC6, 0x2B, 0x24, 0x37, 0x37, 0xDC, 0x51, 0xB6, 0xBC, 0x3D, 0x54, 0xA1, 0x7E,
	0x85, 0x99, 0x5E, 0x61, 0xDA, 0xB2, 0xF9, 0x7F, 0xA9, 0xC3, 0x2E, 0x56, 0x7E, 0xD7, 0x70, 0xBB,
	0x8C, 0xDB, 0x4F, 0xB8, 0x5D, 0xC2, 0xED, 0x2A, 0x6E, 0xA5, 0xB8, 0x3D, 0xC4, 0xED, 0x81, 0xD1,
	0x3A, 0xEC, 0x66, 0xAD, 0xFF, 0x56, 0x1F, 0x47, 0x0A, 0x86, 0xBA, 0x7D, 0xEC, 0xE7, 0xA4, 0xFF,
	0x70, 0xC3, 0x70, 0xEE, 0xBE, 0xFE, 0xA3, 0x79, 0xF5, 0x22, 0xBE, 0x4D, 0x9A, 0xB7, 0xDD, 0x43,
	0x3F, 0xC9, 0x54, 0xC2, 0xAA, 0x1D, 0x5E, 0xAC, 0xC8, 0xD9, 0xB1, 0x22, 0x75, 0x67, 0xAD, 0xB2,
	0x33, 0xFC, 0xC1, 0x69, 0xB1, 0xF8, 0xD6, 0x6E, 0xB4, 0xBA, 0xA2, 0x5D, 0xC6, 0xAD, 0xFB, 0x41,
	0x56, 0x3D, 0x6D, 0xF4, 0x51, 0x1C, 0x39, 0x75, 0xBF, 0x88, 0x5E, 0xD5, 0x61, 0xF3, 0x08, 0x58,
	0x34, 0x6F, 0xA4, 0x50, 0xE4, 0x22, 0x1C, 0x2E, 0x12, 0x1A, 0x8D, 0x25, 0x5D, 0x20, 0x8F, 0x0E,
	0x8A, 0x6C, 0x3D, 0x17, 0x4A, 0x30, 0x36, 0x44, 0x1E, 0x29, 0x17, 0x34, 0xEB, 0xF4, 0x43, 0xC0,
	0xE7, 0x11, 0x91, 0xE1, 0x88, 0xA6, 0xE9, 0xE6, 0x2F, 0x0E, 0x8D, 0xA4, 0x9B, 0x2F, 0x9C, 0x7B,
	0x13, 0x3B, 0x7F, 0x91, 0x95, 0xD6, 0xBA, 0x57, 0x0B, 0x39, 0x5E, 0x60, 0x80, 0x67, 0xD9, 0x61,
	0x6F, 0x99, 0x9C, 0x7A, 0x8A, 0x58, 0xF5, 0x8C, 0x81, 0xD3, 0xFB, 0xF3, 0x2D, 0xBA, 0xD0, 0x7F,
	0x29, 0x6A, 0x0B, 0x85, 0xC2, 0xAB, 0x5E, 0x90, 0x69, 0x3E, 0xA9, 0x12, 0x60, 0x71, 0x83, 0x5B,
	0x7F, 0x80, 0x9E, 0x7E, 0xF3, 0x63, 0x00, 0x0E, 0x5F, 0xAA, 0xAF, 0x07, 0x2A, 0xAB, 0xC0, 0xC5,
	0xBB, 0x96, 0xA2, 0x42, 0xEB, 0x4B, 0x62, 0xF0, 0x60, 0x95, 0x5A, 0xD7, 0x53, 0x87, 0x28, 0x4D,
	0xD9, 0xF6, 0xD1, 0x3A, 0x04, 0x03, 0x4B, 0x5D, 0x96, 0xD2, 0x54, 0xE2, 0xFB, 0x26, 0x29, 0xBD,
	0x11, 0x1D, 0x7E, 0x6F, 0xDC, 0xFA, 0x26, 0x6C, 0xF4, 0x3E, 0x85, 0xB0, 0x19, 0x4E, 0x08, 0xA7,
	0x2B, 0x18, 0x98, 0x38, 0x48, 0x53, 0x46, 0x20, 0x58, 0x10, 0x10, 0xBA, 0x30, 0x34, 0xAA, 0x3D,
	0x79, 0x2A, 0x69, 0xCD, 0xB8, 0x3B, 0xC0, 0x78, 0xC9, 0x38, 0xD4, 0x24, 0x65, 0x20, 0x77, 0xA5,
	0x4C, 0xCC, 0x40, 0xA3, 0x62, 0xA5, 0x9C, 0x00, 0xA8, 0x7D, 0x8A, 0xCD, 0x01, 0xD6, 0x8E, 0x08,
	0x3E, 0x0A, 0x90, 0xA4, 0x2B, 0xD8, 0x0E, 0x70, 0xBB, 0xF6, 0xC7, 0x06, 0x00, 0x1D, 0x4F, 0x52,
	0x0E, 0x50, 0x6C, 0x97, 0x26, 0x06, 0x2A, 0xD3, 0x69, 0x79, 0xA0, 0x1C, 0x51, 0x13, 0x13, 0xBF,
	0xDA, 0x36, 0x1B, 0x51, 0x39, 0x8B, 0x83, 0xC4, 0xC1, 0x88, 0x72, 0x3F, 0x53, 0xEF, 0x2C, 0x41,
	0x94, 0x58, 0xBC, 0x88, 0xEF, 0x8B, 0xA8, 0xA3, 0x75, 0xC5, 0x0B, 0xC6, 0x22, 0xAA, 0xE9, 0x71,
	0x51, 0x74, 0x0A, 0x62, 0x27, 0xDB, 0x56, 0x9E, 0xD1, 0xD4, 0xF2, 0xF5, 0x71, 0x95, 0x29, 0x88,
	0xF2, 0xD6, 0xF9, 0xDA, 0xE3, 0x61, 0xC9, 0xE3, 0x21, 0x7D, 0xF0, 0x60, 0xA3, 0xD0, 0x04, 0xA8,
	0x10, 0xB5, 0xC3, 0x53, 0x19, 0x88, 0xAF, 0xAA, 0xC7, 0x95, 0x6C, 0x49, 0x45, 0x94, 0xF3, 0x91,
	0xC3, 0xD6, 0xE9, 0x88, 0xAA, 0x54, 0x4F, 0x39, 0xF9, 0x0D, 0xA2, 0x6E, 0x6D, 0xCE, 0x5B, 0xBF,
	0x15, 0x97, 0x34, 0xC7, 0xC3, 0x0E, 0x5F, 0xED, 0x9C, 0xE9, 0xB4, 0x0F, 0x0F, 0x7D, 0xE9, 0x85,
	0xE1, 0xB9, 0x88, 0xCA, 0x3E, 0xB9, 0xF9, 0xD1, 0x01, 0x44, 0xAD, 0x3E, 0x1B, 0x57, 0x96, 0x87,
	0xA8, 0xA7, 0xA2, 0x6C, 0xDB, 0x2C, 0x44, 0xFB, 0x6A, 0xC7, 0xCC, 0xC0, 0x85, 0x19, 0x63, 0xA4,
	0x9A, 0x6D, 0xE7, 0x19, 0x4B, 0x2F, 0x2D, 0xDA, 0x7D, 0x0A, 0x2F, 0xF7, 0xA4, 0x55, 0xA6, 0x19,
	0xB7, 0x4A, 0xF1, 0x2B, 0x47, 0xDF, 0xB5, 0x9F, 0xC0, 0xCF, 0xC7, 0x1F, 0x78, 0xDA, 0x69, 0x93,
	0x26, 0x67, 0xA5, 0x03, 0x06, 0x9E, 0x36, 0xAD, 0x42, 0xBD, 0x0C, 0x43, 0xB2, 0x99, 0x20, 0x26,
	0x9B, 0x8F, 0x41, 0xB7, 0xE6, 0x8B, 0xA8, 0x86, 0x30, 0x0C, 0xDF, 0x55, 0xF9, 0xCC, 0x99, 0x57,
	0x84, 0xA1, 0xC8, 0x4F, 0x32, 0xC4, 0x19, 0xFF, 0x1D, 0xA6, 0xFD, 0xD5, 0x81, 0xD5, 0xDD, 0xA6,
	0xD6, 0xA8, 0x68, 0xB1, 0x56, 0xF1, 0xC4, 0x8C, 0x40, 0x70, 0x42, 0xB7, 0xB5, 0x77, 0x87, 0x91,
	0x99, 0x03, 0x72, 0x79, 0x15, 0x06, 0x6E, 0xAA, 0x6D, 0xE7, 0x79, 0x6C, 0x8D, 0x6D, 0x8D, 0x05,
	0xF1, 0x76, 0x30, 0x7D, 0x46, 0x28, 0x9F, 0xC0, 0x6D, 0xF7, 0xCC, 0x38, 0x4B, 0x02, 0x79, 0x45,
	0x36, 0xB9, 0x0F, 0x88, 0xFF, 0x72, 0x8F, 0xB4, 0xFC, 0x87, 0x04, 0x36, 0x1D, 0x3A, 0xEF, 0x76,
	0x8F, 0xC0, 0xA5, 0xD5, 0xBF, 0x8F, 0xAA, 0x26, 0xD0, 0x3B, 0xC7, 0xAF, 0xE6, 0x11, 0x01, 0xDB,
	0xA9, 0xF4, 0x85, 0xE7, 0xD3, 0x30, 0xDC, 0x94, 0x5B, 0xF8, 0x34, 0x10, 0xA8, 0x4A, 0x6D, 0x58,
	0x31, 0x6A, 0x09, 0x06, 0xCB, 0xE0, 0xDE, 0x9E, 0x4D, 0x64, 0x46, 0x33, 0xB4, 0x67, 0xB1, 0x6B,
	0x58, 0x47, 0xF2, 0x8C, 0xA7, 0xF9, 0x1F, 0xF4, 0xBD, 0x21, 0xC2, 0x6B, 0xE9, 0x28, 0x9D, 0x77,
	0xED, 0x28, 0x02, 0x5B, 0x6F, 0x56, 0x28, 0xAF, 0x10, 0x38, 0xC9, 0x4B, 0x1E, 0x5F, 0x1E, 0x8A,
	0xE1, 0xB7, 0x29, 0xCA, 0xED, 0xB1, 0x64, 0xE6, 0x62, 0xE1, 0x2C, 0x81, 0x92, 0x40, 0x7F, 0xF1,
	0x80, 0x81, 0xC3, 0x08, 0xA8, 0x6C, 0x9F, 0x54, 0x3B, 0x13, 0xF8, 0x23, 0x5E, 0xFB, 0xCC, 0x93,
	0x40, 0xCC, 0xED, 0x3C, 0xDE, 0x7B, 0x8C, 0xC3, 0xB0, 0xF9, 0x49, 0xEE, 0x04, 0xEE, 0x0D, 0xDF,
	0x53, 0x2C, 0xC0, 0x00, 0x81, 0xBF, 0xD6, 0xC4, 0x03, 0x24, 0x27, 0xBC, 0xBB, 0x07, 0x0C, 0x52,
	0x6D, 0x33, 0x4F, 0x58, 0x60, 0xE9, 0xDD, 0x07, 0xE0, 0xD8, 0xE8, 0xC1, 0xA1, 0x00, 0x23, 0xBD,
	0xCC, 0x66, 0x01, 0xC8, 0x92, 0xD4, 0x1A, 0x80, 0x23, 0x76, 0x93, 0x37, 0x02, 0x14, 0xBA, 0x26,
	0x8E, 0x00, 0x88, 0xA0, 0x77, 0x89, 0x01, 0x3E, 0x29, 0x98, 0x9D, 0x04, 0x50, 0xBA, 0xEE, 0x58,
	0x36, 0x40, 0x10, 0x32, 0x09, 0x07, 0xD0, 0xF8, 0x2E, 0xE9, 0x05, 0x70, 0x3F, 0xF8, 0x67, 0x7C,
	0xCA, 0x52, 0x3C, 0xCE, 0x9C, 0x00, 0x98, 0x5B, 0x17, 0x34, 0x07, 0x40, 0x3D, 0xF8, 0xDA, 0x01,
	0x80, 0x8F, 0x4D, 0xCF, 0xC4, 0x02, 0xEC, 0xEF, 0xEA, 0xFF, 0x27, 0x80, 0xDB, 0xB2, 0xE9, 0x55,
	0x00, 0x59, 0x21, 0x25, 0x43, 0xED, 0x41, 0xA6, 0x3A, 0x77, 0xBE, 0xBD, 0x79, 0xC6, 0xC2, 0x80,
	0xEE, 0x4F, 0x73, 0x01, 0xA2, 0xAF, 0x0E, 0x1E, 0x84, 0xB3, 0x8A, 0x2D, 0x91, 0x01, 0xE4, 0x94,
	0x57, 0x3C, 0x07, 0xE8, 0x51, 0x53, 0xB0, 0x03, 0x20, 0x90, 0x6F, 0x19, 0x80, 0x3F, 0x4D, 0xCF,
	0xFA, 0xCD, 0x07, 0x58, 0x61, 0x2D, 0x7A, 0x07, 0xC0, 0x36, 0x6E, 0xC8, 0x24, 0x80, 0xA8, 0xC6,
	0xAC, 0x04, 0x00, 0x93, 0x30, 0x35, 0x9E, 0xC9, 0xD8, 0x2B, 0x59, 0x07, 0x74, 0x1F, 0x49, 0xEA,
	0x06, 0x73, 0x07, 0xAD, 0x94, 0x7E, 0xF0, 0x30, 0x72, 0x2A, 0x03, 0xD7, 0x63, 0x12, 0x1D, 0x19,
	0xD8, 0xBF, 0xD1, 0xE7, 0x6B, 0x06, 0x7C, 0x3E, 0x75, 0x95, 0x10, 0xE8, 0xC8, 0xFB, 0x79, 0x7A,
	0xEF, 0x5C, 0x1B, 0xC6, 0xC9, 0x96, 0x6A, 0xEF, 0x1F, 0x18, 0xC8, 0xF3, 0x57, 0xD1, 0x0C, 0x38,
	0xF5, 0xC8, 0x77, 0x65, 0x60, 0x4D, 0xC3, 0x91, 0x74, 0x06, 0x2E, 0xCB, 0xCA, 0xF6, 0x30, 0x60,
	0xFD, 0xA5, 0x68, 0x27, 0x03, 0x95, 0xAA, 0x4D, 0xD7, 0x1D, 0x8E, 0x56, 0x48, 0xE9, 0x53, 0xEE,
	0x99, 0x05, 0x2E, 0x04, 0x1C, 0x64, 0xC7, 0x3F, 0xFC, 0x3B, 0x07, 0xC3, 0xF8, 0x1B, 0xAB, 0x64,
	0xEE, 0xB9, 0x18, 0x04, 0xD1, 0xB9, 0x4F, 0xF6, 0x5E, 0x2B, 0xC6, 0x33, 0xDF, 0xA7, 0xFB, 0x47,
	0x47, 0x4D, 0x33, 0x92, 0xE7, 0x3F, 0x6C, 0x00, 0xFE, 0x15
};

//Packets 973+974 from login.pcapng
static const uint8 g_client0_answer12[0x5E3] = 
{
	0x01, 0x01, 0x00, 0x00, 0x32, 0x03, 0x2B, 0x00, 0x2C, 0x1E, 0x8B, 0xEE, 0x3B, 0x01, 0x00, 0x00, 
	0x78, 0x9C, 0x5B, 0xC1, 0xC0, 0xCC, 0xE0, 0xA8, 0x39, 0x9B, 0x09, 0x84, 0x19, 0x1E, 0x5C, 0xFA,				//After Quest Warp Director
	0x27, 0xC2, 0x60, 0xCE, 0xC8, 0x00, 0x04, 0x16, 0x2F, 0x1E, 0x04, 0x80, 0xE8, 0x1A, 0x96, 0xF8,
	0x84, 0x3D, 0x4A, 0x95, 0x25, 0xA1, 0x01, 0x2C, 0x35, 0x7F, 0xBF, 0x09, 0xF0, 0x28, 0x3F, 0x08,
	0x60, 0x79, 0xF5, 0x7B, 0xDF, 0x6B, 0xB0, 0x48, 0xCF, 0xCA, 0x88, 0x07, 0x60, 0x86, 0xB9, 0x6B,
	0xBA, 0x0D, 0x98, 0x71, 0xF6, 0xFA, 0x39, 0x4F, 0x30, 0xE3, 0xF6, 0x86, 0x2B, 0xC9, 0x60, 0x46,
	0xEC, 0xC6, 0x13, 0xF5, 0x10, 0x35, 0x29, 0x73, 0xB2, 0xC1, 0x0C, 0x2E, 0xDF, 0xF0, 0x29, 0x60,
	0x86, 0x5F, 0xCF, 0xF3, 0xE9, 0x60, 0x86, 0xBA, 0xDD, 0x46, 0x5F, 0x30, 0x83, 0x69, 0x4A, 0x8B,
	0x0B, 0x03, 0x43, 0x83, 0x7D, 0x9A, 0x7E, 0x7C, 0x66, 0x5E, 0x66, 0x09, 0x03, 0x02, 0xAC, 0x20,
	0xE0, 0xCE, 0x0A, 0x16, 0x96, 0xEB, 0x5B, 0x25, 0x41, 0x7A, 0x99, 0x26, 0x6B, 0x9F, 0x94, 0xFE,
	0xFF, 0x9F, 0x49, 0xF3, 0xB6, 0xB4, 0xDC, 0xFF, 0xFF, 0x8C, 0x99, 0x0F, 0x4E, 0x6F, 0x64, 0x61,
	0xDC, 0x78, 0x6B, 0xF9, 0x0F, 0x56, 0x46, 0xFB, 0xDA, 0x7F, 0x0A, 0xAC, 0x2C, 0x97, 0x65, 0x74,
	0x18, 0x04, 0x39, 0xBF, 0x2E, 0x60, 0x59, 0x53, 0x37, 0xF1, 0x9A, 0xE6, 0xFD, 0x15, 0x76, 0x2C,
	0x4B, 0xDF, 0x96, 0x64, 0x32, 0x6C, 0xF9, 0xB8, 0x80, 0x45, 0xE0, 0xF9, 0xBD, 0x18, 0x8B, 0x0D,
	0x40, 0xC6, 0xF7, 0xBD, 0x0B, 0xE4, 0xED, 0x40, 0x8C, 0x36, 0x01, 0xBE, 0x70, 0x13, 0x10, 0xE3,
	0x81, 0xC6, 0xFF, 0xF3, 0x6B, 0x40, 0x0C, 0xB1, 0x00, 0xE5, 0x2B, 0xCE, 0x40, 0x06, 0xA6, 0x1B,
	0x89, 0x71, 0x67, 0x25, 0xCB, 0x17, 0x2E, 0xB6, 0x88, 0xD5, 0x20, 0x83, 0x56, 0xB0, 0xD9, 0xB0,
	0xDB, 0x83, 0x18, 0xAD, 0x87, 0x19, 0xD7, 0x6E, 0x05, 0x31, 0x56, 0xFD, 0x6B, 0xBD, 0xE2, 0x05,
	0x62, 0xCC, 0x56, 0x6E, 0x5A, 0xED, 0x04, 0x64, 0x30, 0x0A, 0x07, 0x58, 0x2F, 0x62, 0x64, 0xDC,
	0xFB, 0xFD, 0xBA, 0x08, 0x23, 0x23, 0xAB, 0xDD, 0x8C, 0x47, 0x8C, 0x8C, 0xFB, 0x99, 0xBC, 0xCA,
	0xD9, 0x18, 0x0D, 0x6E, 0x6E, 0x8E, 0xE2, 0x61, 0x0C, 0x9B, 0xAA, 0xD3, 0xC4, 0xC9, 0x78, 0xA5,
	0xE9, 0x37, 0x1F, 0x13, 0x63, 0x70, 0xF2, 0xCD, 0x55, 0x4C, 0x4C, 0xAC, 0x42, 0x6D, 0xED, 0xC7,
	0x0D, 0x98, 0x16, 0xDF, 0xFE, 0xB4, 0xF0, 0xA8, 0x01, 0x93, 0x80, 0xB6, 0x45, 0xFD, 0x31, 0x83,
	0x0E, 0x6C, 0x0E, 0xD5, 0x00, 0xBA, 0x93, 0x89, 0xE1, 0x47, 0x3C, 0xC2, 0x9D, 0xA7, 0x18, 0x90,
	0xDD, 0x89, 0xEC, 0x1F, 0x54, 0x75, 0x17, 0xB0, 0xAA, 0x1B, 0x28, 0xC0, 0x08, 0xA5, 0x3D, 0x30,
	0xDC, 0x79, 0x0E, 0x2C, 0x8E, 0xEC, 0x4E, 0x90, 0x3C, 0x21, 0xF3, 0x02, 0x30, 0xCC, 0x39, 0x8F,
	0x61, 0x0E, 0x29, 0x00, 0xD3, 0x5D, 0xB6, 0x28, 0xE9, 0x01, 0x04, 0x52, 0x52, 0x93, 0x4A, 0xD3,
	0x09, 0x98, 0x83, 0x19, 0x5F, 0x26, 0x18, 0xE6, 0x60, 0x57, 0xE7, 0x82, 0x55, 0x1D, 0xA6, 0xBB,
	0x2A, 0xB1, 0xAA, 0x23, 0x04, 0x30, 0xED, 0x73, 0x25, 0xD2, 0x5D, 0xD5, 0xD8, 0xD5, 0x31, 0xA2,
	0xAB, 0x3B, 0xC3, 0x80, 0xA6, 0xCE, 0x96, 0x50, 0x78, 0xB9, 0x10, 0x90, 0x67, 0xD2, 0x0F, 0xAE,
	0x2C, 0x2E, 0x49, 0xCD, 0xD5, 0x07, 0x2B, 0xD4, 0x2B, 0x28, 0xCA, 0x4F, 0x67, 0x60, 0x01, 0x02,
	0x66, 0xA0, 0xDC, 0x51, 0x47, 0x66, 0x66, 0x7E, 0x52, 0x02, 0x60, 0x80, 0x00, 0x28, 0x3C, 0x19,
	0x89, 0xCC, 0xBF, 0x8C, 0x43, 0x24, 0xFF, 0x32, 0x12, 0xC8, 0xBF, 0x8C, 0x44, 0xE6, 0x5F, 0x46,
	0x2A, 0xE7, 0x5F, 0x46, 0x02, 0xF9, 0xB7, 0x3C, 0xBF, 0x28, 0x27, 0xC5, 0x37, 0x11, 0x98, 0xA4,
	0x8A, 0x70, 0x9A, 0x83, 0x19, 0x5F, 0xB8, 0xF3, 0x2F, 0x23, 0x91, 0xF9, 0x97, 0x91, 0x4A, 0xF9,
	0x97, 0x91, 0xC8, 0xFC, 0xCB, 0x48, 0x64, 0xFE, 0x65, 0x24, 0x90, 0x7F, 0x09, 0x85, 0x57, 0x38,
	0x01, 0x79, 0x26, 0x7D, 0xB0, 0x0A, 0x7D, 0x24, 0x75, 0xF1, 0xA9, 0x65, 0xA9, 0x79, 0x25, 0xE0,
	0x5C, 0xCC, 0xC2, 0x3A, 0x54, 0xF2, 0xAF, 0x20, 0xC3, 0x02, 0x77, 0x42, 0xF9, 0xD7, 0x03, 0x43, 
	0x5D, 0x36, 0x4A, 0xB8, 0xF3, 0x31, 0xE4, 0xE5, 0x97, 0x64, 0x26, 0xA7, 0xBA, 0x82, 0xFD, 0x8F,
	0x1B, 0x10, 0x32, 0x87, 0x81, 0x11, 0x62, 0x4E, 0x50, 0x6A, 0x61, 0x69, 0x6A, 0x31, 0x6E, 0x93, 
	0x08, 0x9B, 0x53, 0x94, 0x5A, 0xE8, 0x96, 0x5F, 0xE4, 0x9C, 0x91, 0x99, 0x93, 0x82, 0xC7, 0x3D, 
	0x2B, 0x30, 0xCC, 0x19, 0xBC, 0xE5, 0x12, 0xAA, 0x3B, 0x31, 0xCB, 0x25, 0x90, 0x3C, 0x21, 0xF3,
	0x02, 0x30, 0xCC, 0xA1, 0xBC, 0x5C, 0x42, 0x35, 0x0F, 0xB3, 0x5C, 0x4A, 0x4C, 0x03, 0xE6, 0x8C, 
	0x40, 0x50, 0x74, 0x86, 0xC7, 0x17, 0x14, 0x95, 0x19, 0x78, 0xE6, 0xE5, 0x19, 0x18, 0xC6, 0x1B,
	0xA0, 0x54, 0x8D, 0x98, 0xE9, 0x10, 0x77, 0xB9, 0x84, 0xAA, 0x0E, 0x77, 0xB9, 0x84, 0xAA, 0x8E,
	0xFC, 0x72, 0x09, 0xD5, 0x1C, 0xDC, 0xE5, 0x12, 0xAA, 0x3A, 0xDC, 0xE5, 0x12, 0xAA, 0x3A, 0xCC,
	0x72, 0x09, 0x57, 0x78, 0x39, 0x18, 0xB8, 0x99, 0x18, 0x18, 0x30, 0x30, 0x38, 0x22, 0xE4, 0x13,
	0x8B, 0x0A, 0x5C, 0x32, 0x8B, 0x52, 0x93, 0x4B, 0xF2, 0x91, 0x8A, 0x28, 0x26, 0x7D, 0x98, 0x98,
	0x3E, 0x0E, 0xA5, 0xE0, 0xF2, 0x09, 0x98, 0xB8, 0x2C, 0x3A, 0x07, 0x6B, 0x19, 0x85, 0x99, 0x2F,
	0x51, 0xFB, 0x2F, 0xEC, 0x58, 0x7B, 0x13, 0xF4, 0x07, 0x90, 0xFA, 0x88, 0x70, 0xF9, 0xB9, 0x02,
	0x43, 0xDD, 0xE0, 0x2D, 0x67, 0x18, 0x09, 0x94, 0x33, 0x8C, 0x44, 0x94, 0x33, 0x00, 0xC4, 0xEA,
	0x5B, 0x64, 
	
	0x01, 0x01, 0x00, 0x00, 0xB1, 0x02, 0x29, 0x00, 0x4A, 0x1E, 0x8B, 0xEE, 0x3B, 0x01, 0x00, 0x00, 
	0x78, 0x9C, 0xED, 0x57, 0xCD, 0x6E, 0xD3, 0x40, 0x18, 0xDC, 0x75, 0xDC, 0x05, 0x8A, 0x21, 0x01,
	0xCA, 0x4F, 0x29, 0x08, 0x01, 0x42, 0x80, 0x90, 0xB0, 0x51, 0x8A, 0xC8, 0x25, 0x22, 0x25, 0x0D,
	0x6D, 0x05, 0x14, 0xD3, 0xF6, 0xC4, 0x25, 0x72, 0xC2, 0x22, 0xD2, 0x46, 0x8E, 0x09, 0x4E, 0xA4,
	0xAA, 0x67, 0x24, 0xDE, 0x81, 0x4B, 0x8F, 0xBD, 0xF2, 0x02, 0x70, 0x47, 0x85, 0x22, 0x90, 0xE8,
	0xB5, 0xDC, 0x78, 0x04, 0xA4, 0xA8, 0x05, 0x6F, 0xF2, 0x39, 0xD8, 0x5E, 0x27, 0xDE, 0x82, 0x2B,
	0x05, 0x89, 0x4F, 0x8A, 0x26, 0xD9, 0x1D, 0x8F, 0x77, 0x3F, 0x7B, 0x67, 0x14, 0x1D, 0x25, 0x10,
	0x46, 0xAB, 0x53, 0x13, 0x57, 0x5F, 0x4B, 0x68, 0xEB, 0xF3, 0xCE, 0x08, 0xDA, 0x40, 0xAC, 0x32,
	0xDF, 0xB7, 0x74, 0xF4, 0x07, 0x35, 0xCD, 0xE9, 0x65, 0x71, 0x50, 0xAF, 0x68, 0xD4, 0xA9, 0xF1, 
	0xC0, 0x78, 0x61, 0xD3, 0x7A, 0x4F, 0x9D, 0x2B, 0x9C, 0xCE, 0x38, 0xA7, 0x13, 0xCE, 0x9B, 0x0C, 
	0xE5, 0xF1, 0xEB, 0x5A, 0x0E, 0xE5, 0x45, 0x15, 0x7F, 0xBF, 0x82, 0xE0, 0xBA, 0x56, 0xC2, 0x79, 
	0x38, 0xC8, 0x5B, 0x47, 0x01, 0x5E, 0xD6, 0xD3, 0xAF, 0x9C, 0x76, 0x77, 0x5C, 0xD3, 0x02, 0x6B, 
	0x7A, 0x5C, 0x33, 0x69, 0x67, 0x5A, 0xAF, 0x37, 0x67, 0x82, 0xB3, 0x08, 0x49, 0xEA, 0x84, 0x23,
	0xA0, 0x32, 0x9A, 0x1A, 0xE4, 0xCA, 0x09, 0xC9, 0xAA, 0x37, 0xB5, 0x19, 0xD3, 0xD4, 0x6E, 0x20, 
	0x09, 0xA1, 0x9F, 0x4E, 0x29, 0xCE, 0xA8, 0x2C, 0xB3, 0x4F, 0x72, 0x37, 0xAD, 0xD9, 0xD3, 0x62,
	0xFD, 0x54, 0x7C, 0x7D, 0x7A, 0xDF, 0x1E, 0x77, 0xFB, 0xB4, 0x1F, 0x78, 0xD3, 0x1C, 0xEF, 0xBA, 
	0xAF, 0xEF, 0x32, 0xB2, 0x8D, 0xEA, 0xD2, 0x24, 0x7D, 0x6A, 0x34, 0xAA, 0x76, 0x9F, 0xFB, 0xF1, 
	0x3A, 0x4B, 0xFE, 0xE7, 0x87, 0xCD, 0x9A, 0x5D, 0x29, 0xD3, 0x42, 0x93, 0x9A, 0xFD, 0x74, 0xD6, 
	0x38, 0x9D, 0x4F, 0xBE, 0x75, 0x7B, 0x2A, 0xD7, 0xBE, 0x01, 0x5A, 0xCD, 0x49, 0xE2, 0x6D, 0xF9, 
	0xEB, 0x4A, 0x00, 0xF2, 0xFB, 0xFD, 0xD8, 0x1E, 0xF7, 0xAE, 0x93, 0xCD, 0xCF, 0xFD, 0x18, 0xCB, 
	0xB3, 0xEF, 0x9B, 0x17, 0x2F, 0xE5, 0xD3, 0xE9, 0x2F, 0xEF, 0x82, 0x7A, 0x3A, 0xA7, 0x13, 0xEE,
	0x27, 0x51, 0x3A, 0x6E, 0xB1, 0xF3, 0xE1, 0xD7, 0xFB, 0xEA, 0xD3, 0xDB, 0x79, 0xD4, 0xE1, 0xB1,
	0x9E, 0xB1, 0xFE, 0x61, 0x39, 0x85, 0xDC, 0xFE, 0xB9, 0x7B, 0x93, 0x01, 0x87, 0x00, 0x09, 0xE0,
	0x3E, 0x40, 0xF7, 0xDD, 0x39, 0x00, 0x38, 0x0C, 0x78, 0xB0, 0xBB, 0xEF, 0x4E, 0x1D, 0x02, 0xB1,
	0xC3, 0xF0, 0xDB, 0x3D, 0x1D, 0x29, 0xC0, 0x23, 0x80, 0x47, 0x01, 0x8F, 0x01, 0x8E, 0x00, 0x1E,
	0x07, 0x3C, 0x01, 0x78, 0x12, 0xF0, 0x14, 0xE0, 0x28, 0xE0, 0x69, 0xC0, 0x31, 0x14, 0x5D, 0x67,
	0x00, 0xF9, 0xE7, 0xE7, 0xF7, 0xDD, 0x0B, 0x5A, 0x56, 0x40, 0x2D, 0xEC, 0x9C, 0xF5, 0xF6, 0x5D,
	0x45, 0xD0, 0x77, 0x95, 0x98, 0x7C, 0x57, 0x11, 0xF4, 0x5D, 0x45, 0xD0, 0x77, 0x95, 0x08, 0xDF,
	0xAD, 0x95, 0x16, 0xEF, 0xD0, 0x27, 0xC5, 0xAE, 0x3F, 0x16, 0xB5, 0x92, 0xCF, 0x7F, 0x1F, 0x96,
	0x16, 0x69, 0xD9, 0x76, 0x28, 0x3D, 0xD6, 0x2C, 0xA9, 0xF9, 0x67, 0x46, 0xDD, 0x50, 0x67, 0xAD,
	0xB2, 0xDA, 0xE1, 0xAA, 0xBF, 0x2F, 0x91, 0x59, 0x39, 0xEF, 0x8A, 0xDE, 0x92, 0xE5, 0xEE, 0x15,
	0x58, 0x5A, 0x28, 0xCC, 0x2F, 0xA0, 0xC1, 0xB1, 0xDD, 0x10, 0xFF, 0xBA, 0xE5, 0xEB, 0xE7, 0x28,
	0x5E, 0x53, 0xEE, 0x7D, 0xC3, 0xF8, 0xF9, 0x76, 0xE6, 0x3C, 0xC6, 0x6F, 0x36, 0x5A, 0x2D, 0xFC,
	0x4A, 0x2D, 0x56, 0xCC, 0x4A, 0x3F, 0x53, 0xDC, 0x83, 0x62, 0xCF, 0x9D, 0x08, 0xE6, 0x03, 0x89,
	0x29, 0x1F, 0x48, 0x4C, 0xF9, 0x40, 0xFE, 0x91, 0x7C, 0x20, 0x11, 0xF9, 0xC0, 0xE6, 0x87, 0x37,
	0xCF, 0x39, 0x7E, 0x9E, 0xBE, 0xFD, 0xF2, 0xDA, 0xE5, 0xFC, 0x87, 0xF5, 0xFB, 0x6F, 0x83, 0x7A,
	0x3A, 0xA7, 0x13, 0x9E, 0x0F, 0x51, 0x3A, 0x6E, 0xB1, 0x73, 0x4C, 0xFA, 0xE4, 0xC3, 0xD0, 0x5C,
	0x87, 0xF7, 0x3F, 0x1F, 0x82, 0x7D, 0xF2, 0xE7, 0xC3, 0xD9, 0x5D, 0xE4, 0x03, 0x11, 0xCC, 0x07,
	0x22, 0x98, 0x0F, 0x24, 0xA6, 0x7C, 0x20, 0x82, 0xF9, 0x40, 0x04, 0xF3, 0x81, 0x44, 0xE4, 0x83,
	0x65, 0x55, 0xF3, 0x0D, 0x7B, 0xBE, 0x4C, 0x4D, 0xEA, 0x0D, 0x89, 0x9B, 0x6E, 0x48, 0xE8, 0x35,
	0xAB, 0x51, 0x35, 0xCA, 0xD4, 0x25, 0xE9, 0x55, 0x63, 0xD9, 0xFB, 0x97, 0xC7, 0x9B, 0x0F, 0x2E,
	0x57, 0xED, 0x71, 0x11, 0xC4, 0x45, 0x6A, 0x25, 0x33, 0x58, 0x71, 0xC1, 0xFB, 0xD7, 0xE0, 0xE6,
	0x43, 0x52, 0x30, 0x1F, 0x92, 0x31, 0xE5, 0x43, 0x32, 0x86, 0x7C, 0xF8, 0x05, 0xAE, 0x4E, 0xEC, 
	0x54
};

static const uint8 g_client1_answer1[0x28] = 
{
	0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x18, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFD, 0xFF, 0xFF, 
	0x96, 0x16, 0x00, 0xE0, 0x31, 0xE8, 0xE0, 0x50
};

static const uint8 g_client1_answer2[0x48] = 
{
	0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x38, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x41, 0x29, 0x9B, 0x02, 0x7F, 0xFD, 0xFF, 0xFF, 0xEB, 0xE5, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x20, 0x8D, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x8D, 0x62, 0x00, 0x41, 0x29, 0x9B, 0x02, 
	0x10, 0x8D, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00
};

#define LOGNAME		("GameServer")

static PacketData GetMotd()
{
	std::vector<const char*> messages;
	messages.push_back("Welcome to the Seventh Umbral Server");
	messages.push_back("Compiled on: " __DATE__);
	messages.push_back("---------------");
	messages.push_back("\xE2\x96\xA0 Bonne Sainte-Valentine!");

	const static uint8 packetHeader[] =
	{
		0x01, 0x00, 0x00, 0x00, 0x58, 0x02, 0x06, 0x00, 0xF9, 0x18, 0x8B, 0xEE, 0x3B, 0x01, 0x00, 0x00
	};

	PacketData outgoingPacket;
	outgoingPacket.insert(std::end(outgoingPacket), std::begin(packetHeader), std::end(packetHeader));

	for(auto message : messages)
	{
		uint8 messagePacket[0x248] = 
		{
			0x48, 0x02, 0x03, 0x00, 0x41, 0x29, 0x9B, 0x02, 0x41, 0x29, 0x9B, 0x02, 0x00, 0xE0, 0xD2, 0xFE, 
			0x14, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};

		memcpy(messagePacket + 0x44, message, strlen(message) + 1);

		outgoingPacket.insert(std::end(outgoingPacket), std::begin(messagePacket), std::end(messagePacket));
	}

	uint32 packetSize = outgoingPacket.size();
	assert(packetSize < 0x10000);

	*reinterpret_cast<uint16*>(outgoingPacket.data() + 0x4) = static_cast<uint16>(packetSize);

	return outgoingPacket;
}

static PacketData GetCharacterInfo()
{
	PacketData outgoingPacket(std::begin(g_client0_answer8), std::end(g_client0_answer8));

	CCharacter character;
	auto personalDataPath = Framework::PathUtils::GetPersonalDataPath();
	auto characterPath = personalDataPath / "ffxivd_character.xml";
	if(boost::filesystem::exists(characterPath))
	{
		auto inputStream = Framework::CreateInputStdStream(characterPath.native());
		character.Load(inputStream);
	}

	const uint32 characterInfoBase = 0x368;

	*reinterpret_cast<uint32*>(&outgoingPacket[characterInfoBase + 0x20]) = CCharacter::GetModelFromTribe(character.tribe);
	*reinterpret_cast<uint32*>(&outgoingPacket[characterInfoBase + 0x28]) = character.size;
	*reinterpret_cast<uint32*>(&outgoingPacket[characterInfoBase + 0x30]) = character.GetColorInfo();
	*reinterpret_cast<uint32*>(&outgoingPacket[characterInfoBase + 0x38]) = character.GetFaceInfo();
	*reinterpret_cast<uint32*>(&outgoingPacket[characterInfoBase + 0x40]) = character.hairStyle << 10;
	*reinterpret_cast<uint32*>(&outgoingPacket[characterInfoBase + 0x48]) = character.voice;
	*reinterpret_cast<uint32*>(&outgoingPacket[characterInfoBase + 0x50]) = 0;						//weapon

	*reinterpret_cast<uint32*>(&outgoingPacket[characterInfoBase + 0x88]) = character.headGear;		//headGear
	*reinterpret_cast<uint32*>(&outgoingPacket[characterInfoBase + 0x90]) = character.bodyGear;		//bodyGear
	*reinterpret_cast<uint32*>(&outgoingPacket[characterInfoBase + 0x98]) = character.legsGear;		//legsGear
	*reinterpret_cast<uint32*>(&outgoingPacket[characterInfoBase + 0xA0]) = character.handsGear;	//handsGear
	*reinterpret_cast<uint32*>(&outgoingPacket[characterInfoBase + 0xA8]) = character.feetGear;		//feetGear

	//Insert character name
	for(unsigned int i = 0; i < character.name.size(); i++)
	{
		outgoingPacket[characterInfoBase + 0x14C + i] = character.name[i];
	}
	outgoingPacket[characterInfoBase + 0x14C + character.name.size()] = 0;

	return outgoingPacket;
}

static void ClientThreadProc(SOCKET clientSocket, int clientId)
{
	u_long notBlockingMode = 1;
	ioctlsocket(clientSocket, FIONBIO, &notBlockingMode);
	Framework::CMemStream incomingStream;

	printf("%s: Received connection.\r\n", LOGNAME);

	while(1)
	{
		//Read from socket
		{
			static const unsigned int maxPacketSize = 0x10000;
			uint8 incomingPacket[maxPacketSize];
			int read = recv(clientSocket, reinterpret_cast<char*>(incomingPacket), maxPacketSize, 0);
			if(read == 0)
			{
				//Client disconnected
				printf("%s: Client disconnected.\r\n", LOGNAME);
				break;
			}
			if(read > 0)
			{
				incomingStream.Write(incomingPacket, read);
			}
		}
		if(CPacketUtils::HasPacket(incomingStream))
		{
			auto incomingPacket = CPacketUtils::ReadPacket(incomingStream);
			auto subPackets = CPacketUtils::SplitPacket(incomingPacket);
			bool killConnection = false;

			for(const auto& subPacket : subPackets)
			{
				if((clientId == 0) && (subPacket.size() == 0x38) && (subPacket[0x10] == 0x00))
				{
					{
						std::vector<uint8> outgoingPacket(std::begin(g_client0_answer1), std::end(g_client0_answer1));
						int sent = send(clientSocket, reinterpret_cast<const char*>(outgoingPacket.data()), outgoingPacket.size(), 0);
						assert(sent == outgoingPacket.size());
					}

					{
						std::vector<uint8> outgoingPacket(std::begin(g_client0_answer2), std::end(g_client0_answer2));
						int sent = send(clientSocket, reinterpret_cast<const char*>(outgoingPacket.data()), outgoingPacket.size(), 0);
						assert(sent == outgoingPacket.size());
					}

					{
						std::vector<uint8> outgoingPacket(std::begin(g_client0_answer3), std::end(g_client0_answer3));
						int sent = send(clientSocket, reinterpret_cast<const char*>(outgoingPacket.data()), outgoingPacket.size(), 0);
						assert(sent == outgoingPacket.size());
					}

					{
						std::vector<uint8> outgoingPacket(std::begin(g_client0_answer4), std::end(g_client0_answer4));
						int sent = send(clientSocket, reinterpret_cast<const char*>(outgoingPacket.data()), outgoingPacket.size(), 0);
						assert(sent == outgoingPacket.size());
					}

					{
						auto outgoingPacket = GetMotd();
						int sent = send(clientSocket, reinterpret_cast<const char*>(outgoingPacket.data()), outgoingPacket.size(), 0);
						assert(sent == outgoingPacket.size());
					}

					{
						std::vector<uint8> outgoingPacket(std::begin(g_client0_answer7), std::end(g_client0_answer7));
						int sent = send(clientSocket, reinterpret_cast<const char*>(outgoingPacket.data()), outgoingPacket.size(), 0);
						assert(sent == outgoingPacket.size());
					}

					{
						auto outgoingPacket = GetCharacterInfo();
						int sent = send(clientSocket, reinterpret_cast<const char*>(outgoingPacket.data()), outgoingPacket.size(), 0);
						assert(sent == outgoingPacket.size());
					}

					{
						std::vector<uint8> outgoingPacket(std::begin(g_client0_answer9), std::end(g_client0_answer9));
						int sent = send(clientSocket, reinterpret_cast<const char*>(outgoingPacket.data()), outgoingPacket.size(), 0);
						assert(sent == outgoingPacket.size());
					}

					{
						std::vector<uint8> outgoingPacket(std::begin(g_client0_answer10), std::end(g_client0_answer10));
						int sent = send(clientSocket, reinterpret_cast<const char*>(outgoingPacket.data()), outgoingPacket.size(), 0);
						assert(sent == outgoingPacket.size());
					}

					{
						std::vector<uint8> outgoingPacket(std::begin(g_client0_answer11), std::end(g_client0_answer11));
						int sent = send(clientSocket, reinterpret_cast<const char*>(outgoingPacket.data()), outgoingPacket.size(), 0);
						assert(sent == outgoingPacket.size());
					}

					{
						std::vector<uint8> outgoingPacket(std::begin(g_client0_answer12), std::end(g_client0_answer12));
						int sent = send(clientSocket, reinterpret_cast<const char*>(outgoingPacket.data()), outgoingPacket.size(), 0);
						assert(sent == outgoingPacket.size());
					}
				}
				else if((clientId == 0) && (subPacket.size() == 0x38) && (subPacket[0x12] == 0x01))
				{
					//Some keep alive thing? (only time is updated here)
					uint32 clientTime = *reinterpret_cast<const uint32*>(&subPacket[0x18]);
					uint32 moreTime = *reinterpret_cast<const uint32*>(&subPacket[0x20]);

					uint8 keepAlivePacket[0x50] =
					{
						0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x01, 0x00, 0xEF, 0xCB, 0xA4, 0xEE, 0x3B, 0x01, 0x00, 0x00,
						0x40, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9b, 0x02, 0x41, 0x29, 0x9b, 0x02, 0x00, 0xe0, 0xd2, 0xfe,
						0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcb, 0xee, 0xe0, 0x50, 0x00, 0x00, 0x00, 0x00,
						0x4a, 0x18, 0x9c, 0x0a, 0x4d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
					};

					*reinterpret_cast<uint32*>(&keepAlivePacket[0x28]) = clientTime;
					*reinterpret_cast<uint32*>(&keepAlivePacket[0x30]) = moreTime;

					{
						std::vector<uint8> outgoingPacket(std::begin(keepAlivePacket), std::end(keepAlivePacket));
						int sent = send(clientSocket, reinterpret_cast<const char*>(outgoingPacket.data()), outgoingPacket.size(), 0);
						assert(sent == outgoingPacket.size());
					}
				}
				else if((clientId == 0) && (subPacket.size() == 0x40) && (subPacket[0x12] == 0xCA))
				{
					//Some keep alive thing?
					uint32 clientTime = *reinterpret_cast<const uint32*>(&subPacket[0x18]);
					float posX = *reinterpret_cast<const float*>(&subPacket[0x28]);
					float posY = *reinterpret_cast<const float*>(&subPacket[0x2C]);
					float posZ = *reinterpret_cast<const float*>(&subPacket[0x30]);

//					printf("%s: Client Id (%d): Keeping Alive. Time: 0x%0.8X, Pos: (X: %f, Y: %f, Z: %f).\r\n",
//						LOGNAME, clientId, clientTime, posX, posY, posZ);
				}
				else if((clientId == 0) && (subPacket.size() == 0xD8) && (subPacket[0x12] == 0x2D))		//Maybe 0x12D?
				{
					//commandRequest (emote, changing equipment, ...)

					uint32 clientTime = *reinterpret_cast<const uint32*>(&subPacket[0x18]);
					uint32 commandId = *reinterpret_cast<const uint32*>(&subPacket[0x20]);
					const char* commandName = reinterpret_cast<const char*>(subPacket.data()) + 0x31;

					printf("%s: Client Id (%d): %s Id = 0x%0.8X.\r\n", LOGNAME, clientId, commandName, commandId);

					if(!strcmp(commandName, "commandRequest"))
					{
						uint8 emoteId = subPacket[0x55];

						printf("%s: Executing Emote 0x%0.2X\r\n", LOGNAME, emoteId);

						uint8 commandRequestPacket[0x40] =
						{
							0x01, 0x00, 0x00, 0x00, 0x40, 0x00, 0x01, 0x00, 0x52, 0xE2, 0xA4, 0xEE, 0x3B, 0x01, 0x00, 0x00,
							0x30, 0x00, 0x03, 0x00, 0x41, 0x29, 0x9b, 0x02, 0x41, 0x29, 0x9b, 0x02, 0x00, 0xe0, 0xd2, 0xfe,
							0x14, 0x00, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd1, 0xee, 0xe0, 0x50, 0x00, 0x00, 0x00, 0x00,
							0x00, 0xb0, 0x00, 0x05, 0x41, 0x29, 0x9b, 0x02, 0x6e, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						};

						//In: 0x6F, Out: (0x0500B000, 0x526E) -> Dance
						//In: 0x??, Out: (0x5000C000, 0x????) -> Angry Pointing
						//In: 0x??, Out: (0x5000D000, 0x????) -> Snooze
						//In: 0x??, Out: (0x5000E000, 0x????) -> Frustrated
						//In: 0x??, Out: (0x5000F000, 0x????) -> Military Sign
						//In: 0x??, Out: (0x50011000, 0x????) -> Shrug
						//In: 0x??, Out: (0x50012000, 0x????) -> Success Baby
						//In: 0x77, Out: (0x05013000, 0x52BE) -> Kneel
						//In: 0x??, Out: (0x50014000, 0x????) -> Chuckle
						//In: 0x??, Out: (0x50015000, 0x????) -> Laugh
						//In: 0x??, Out: (0x50016000, 0x????) -> Look
						//In: 0x??, Out: (0x50018000, 0x????) -> No
						//In: 0x??, Out: (0x50019000, 0x????) -> Never
					
						uint32 animationId = 0x0500B000;
						uint32 descriptionId = 0x526E;

						switch(emoteId)
						{
						case 0x6A:		//Cheer
							animationId = 0x05006000;
							break;
						case 0x6F:		//Dance
							animationId = 0x0500B000;
							break;
						case 0x71:		//Doze
							animationId = 0x0500D000;
							break;
						case 0x75:		//Huh
							animationId = 0x05011000;
							break;
						case 0x78:		//Chuckle
							animationId = 0x05014000;
							break;
						case 0x79:		//Laugh
							animationId = 0x05015000;
							break;
						}

						*reinterpret_cast<uint32*>(&commandRequestPacket[0x28]) = clientTime;
						*reinterpret_cast<uint32*>(&commandRequestPacket[0x30]) = animationId;
						*reinterpret_cast<uint32*>(&commandRequestPacket[0x38]) = descriptionId;

//						printf("Anim Id = 0x%0.8X, Desc Id = 0x%0.8X\r\n", animationId, descriptionId);
//						animationId += 0x1000;
//						descriptionId += 1;

						{
							std::vector<uint8> outgoingPacket(std::begin(commandRequestPacket), std::end(commandRequestPacket));
							int sent = send(clientSocket, reinterpret_cast<const char*>(outgoingPacket.data()), outgoingPacket.size(), 0);
							assert(sent == outgoingPacket.size());
						}
					}
					else
					{
						//Anything else will probably crash, so just bail
						killConnection = true;
						break;
					}
				}
				else if((clientId == 1) && (subPacket.size() == 0x38) && (subPacket[0x10] == 0x00))
				{
					{
						std::vector<uint8> outgoingPacket(std::begin(g_client1_answer1), std::end(g_client1_answer1));
						int sent = send(clientSocket, reinterpret_cast<const char*>(outgoingPacket.data()), outgoingPacket.size(), 0);
						assert(sent == outgoingPacket.size());
					}

					{
						std::vector<uint8> outgoingPacket(std::begin(g_client1_answer2), std::end(g_client1_answer2));
						int sent = send(clientSocket, reinterpret_cast<const char*>(outgoingPacket.data()), outgoingPacket.size(), 0);
						assert(sent == outgoingPacket.size());
					}
				}
				else
				{
					printf("%s: Client Id (%d): Received unknown packet of size 0x%0.4X.\r\n%s\r\n",
						LOGNAME, clientId, subPacket.size(), CPacketUtils::DumpPacket(subPacket).c_str());
				}
			}

			if(killConnection)
			{
				break;
			}
		}
	}

	closesocket(clientSocket);
}

CGameServer::CGameServer()
{

}

CGameServer::~CGameServer()
{

}

void CGameServer::Start()
{
	std::thread serverThread(std::bind(&CGameServer::ServerThreadProc, this));
	m_serverThread = std::move(serverThread);
}

void CGameServer::ServerThreadProc()
{
	SOCKET listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

	sockaddr_in service;
	service.sin_family			= AF_INET;
	service.sin_addr.s_addr		= inet_addr("127.0.0.1");
	service.sin_port			= htons(GAME_SERVER_PORT);
	if(bind(listenSocket, reinterpret_cast<sockaddr*>(&service), sizeof(sockaddr_in)))
	{
		printf("Failed to bind socket.\r\n");
		return;
	}

	if(listen(listenSocket, SOMAXCONN))
	{
		printf("Failed to listen on socket.\r\n");
		return;
	}

	printf("Game server started.\r\n");

	int clientId = 0;

	while(1)
	{
		sockaddr_in incomingAddr;
		int incomingAddrSize = sizeof(sockaddr_in);
		SOCKET incomingSocket = accept(listenSocket, reinterpret_cast<sockaddr*>(&incomingAddr), &incomingAddrSize);
		std::thread clientThread(std::bind(&ClientThreadProc, incomingSocket, clientId & 1));
		clientThread.detach();
		clientId++;
	}

	closesocket(listenSocket);
}
